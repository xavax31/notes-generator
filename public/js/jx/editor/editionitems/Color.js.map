{"version":3,"sources":["../../../../src/jx/editor/editionitems/Color.js"],"names":["Color","dataObject","Object","assign","icoTitle","icoSymbol","actions","informations","backgroundColor","content","$","view","find","html","prop","editable","data","value","on","event","autoRefresh","_refreshData","onchanged","dispatch","target"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QACqBA,K;;;AACjB,uBAAYC,UAAZ,EAAwB;AAAA;;AAAA,sHACdC,OAAOC,MAAP,CAAc;AAChBC,0BAAU,EADM;AAEhBC,2BAAW,MAFK;AAGhBC,yBAAS,EAHO;AAIhBC,8BAAc,EAJE;AAKhBC,iCAAiB;AALD,aAAd,EAMHP,UANG,CADc;;AASpB,kBAAKQ,OAAL,GAAeC,qGAAf;AACA,kBAAKC,IAAL,CAAUC,IAAV,CAAe,UAAf,EAA2BC,IAA3B,CAAgC,MAAKJ,OAArC;AACA,kBAAKE,IAAL,CAAUC,IAAV,CAAe,QAAf,EAAyBE,IAAzB,CAA8B,UAA9B,EAA0C,CAAC,MAAKC,QAAhD;AACA,kBAAKJ,IAAL,CAAUC,IAAV,CAAe,QAAf,EAAyBE,IAAzB,CAA8B,OAA9B,EAAuC,MAAKE,IAAL,CAAUC,KAAV,IAAmB,EAA1D;AACA,kBAAKN,IAAL,CAAUO,EAAV,CAAa,QAAb,EAAuB,UAACC,KAAD,EAAW;AAC9B,oBAAI,MAAKC,WAAT,EACI,MAAKC,YAAL;AACJ,sBAAKC,SAAL,CAAeC,QAAf,CAAwB,EAAEC,aAAF,EAAxB;AACH,aAJD;AAboB;AAkBvB;;;;2CACc;AACX,qBAAKR,IAAL,CAAUC,KAAV,GAAkB,KAAKA,KAAvB;AACH;;;2CACc;AACX,qBAAKD,IAAL,CAAUC,KAAV,GAAkB,KAAKA,KAAvB;AACH;;;gCACW;AACR,uBAAO,KAAKN,IAAL,CAAUC,IAAV,CAAe,QAAf,EAAyB,CAAzB,EAA4BK,KAAnC;AACH;;;8BACQA,K,EAAO;AACZ,oBAAI,CAACA,KAAL,EAAY;AACR,yBAAKN,IAAL,CAAUC,IAAV,CAAe,QAAf,EAAyBE,IAAzB,CAA8B,UAA9B,EAA0C,CAAC,KAAKC,QAAhD;AACH,iBAFD,MAGK;AACD,yBAAKJ,IAAL,CAAUC,IAAV,CAAe,QAAf,EAAyBE,IAAzB,CAA8B,UAA9B,EAA0C,IAA1C;AACH;AACJ;;;;;;sBApCgBd,K","file":"Color.js","sourcesContent":["import BasicItem from \"jx/editor/editionitems/BasicItem\";\nexport default class Color extends BasicItem {\n    constructor(dataObject) {\n        super(Object.assign({\n            icoTitle: \"\",\n            icoSymbol: \"gear\",\n            actions: [],\n            informations: [],\n            backgroundColor: \"#EEEEEE\"\n        }, dataObject));\n        //console.log(dataObject, this.dataObject)\n        this.content = $(`<input  id=\"value\" class=\"form-control\" type=\"color\" name=\"favcolor\"  value=\"#000000\">`);\n        this.view.find(\"#content\").html(this.content);\n        this.view.find(\"#value\").prop('readonly', !this.editable);\n        this.view.find(\"#value\").prop('value', this.data.value || \"\");\n        this.view.on(\"change\", (event) => {\n            if (this.autoRefresh)\n                this._refreshData();\n            this.onchanged.dispatch({ target: this });\n        });\n    }\n    _refreshData() {\n        this.data.value = this.value;\n    }\n    _refreshView() {\n        this.data.value = this.value;\n    }\n    get value() {\n        return this.view.find(\"#value\")[0].value;\n    }\n    set lock(value) {\n        if (!value) {\n            this.view.find(\"#value\").prop('disabled', !this.editable);\n        }\n        else {\n            this.view.find(\"#value\").prop('disabled', true);\n        }\n    }\n}\n"]}