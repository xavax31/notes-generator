{"version":3,"sources":["../../../../src/jx/projecttypes/editorformattype2/Exporter.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","GENERATED_IMPORT","DONT_TOUCH_FILE","Exporter","jx","dataObject","Object","assign","url","projectJXData","editor","projectInfo","config","exportFormat","exportFile","onFinished","console","log","gabarit","_exportEditorFiles","_exportFonts","_exportModuleFiles","_finish","callback","fileURL","objectData","formatJSON","projectData","db","saveJSON","_getResourcesFromGabarit","jsonObj","JSON","parse","stringify","err","alert","message","logPrefix","resources","fontsNeeded","i","length","element","type","fontsList","push","fontFamily","tools","arr","removeDouble","globalFonts","getOptionsList","fontsDefs","notFoundFonts","fontsToCopy","item","found","filter","index","array","popup","title","content","join","globalFontsPath","destPathes","importFontFaces","publicPath","cssPath","assetsPath","destFontsPath","deleteDirPromise","fileName","destPath","cloneDirPromise","sourcePath","saveTextPromise","toSave","loadTextPromise","fontsCSS","error","replace","gabaritResources","concat","_getResourcesFromGroup","group","prefixID","itemClone","prefixGroup","exportType","id","j","children","activated","prop","description","editable","visible","preview","timestamp","asset","start","end","preload","undefined","src","compType","Number","options","data","quizGroup","profilsGroup","json","titre","questions","profils","conclusions","question","iq","text","_getGroupChildByID","gd","answers","ir","good","style","ip","saveText","childID","_destroy"],"mappings":"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","file":"Exporter.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport JXObject from \"jx/core/JXObject\";\nlet GENERATED_IMPORT = `\n/*EDITOR_START*/\n/* Don't touch this block. It is used and regenated if needed by Editor.\nYou can add custom fonts below this block */\n@import url(\"../assets/fonts/_exported/generated_imports.css\");\n/*EDITOR_END*/\n\n`;\nconst DONT_TOUCH_FILE = `\n/!\\ Ne pas toucher ce dossier /!\\\n\nCe dossier _exported est supprimé et généré par l'éditeur à chaque sauvegarde du projet.\n\nSi nécessaire, des fonts peuvent être importées manuellement en les placant dans le dossier parent assets/fonts et les import @font-face dans le fichier css/fonts.css (à réserver de préférence durant le dev)\n`;\nexport default class Exporter extends JXObject {\n    constructor(jx, dataObject) {\n        super({ jx });\n        this.dataObject = Object.assign({\n            url: null,\n            projectJXData: null\n        }, dataObject);\n        this.editor = this.jx.editor;\n        this.projectInfo = this.dataObject.projectInfo;\n        this.config = {\n            exportFormat: \"json\",\n            exportFile: \"public/assets/config.json\"\n        };\n    }\n    exportConfig(onFinished) {\n        console.log(\"gabarit\", this.projectInfo.gabarit);\n        this.onFinished = onFinished;\n        //this._exportModuleFiles(()=>{this._finish();});\n        this._exportEditorFiles(() => {\n            this._exportFonts(() => {\n                this._exportModuleFiles(() => {\n                    this._finish();\n                });\n            });\n        });\n    }\n    _exportEditorFiles(callback) {\n        var fileURL = this.projectInfo.url + \"/etc/editor/editor.json\";\n        const objectData = {\n            formatJSON: \"SimpleJSON2\",\n            projectData: this.projectInfo.gabarit\n        };\n        this.jx.db.saveJSON(fileURL, objectData, () => callback());\n    }\n    _exportModuleFiles(callback) {\n        var fileURL = this.projectInfo.url + \"/\" + this.config.exportFile;\n        const objectData = {\n            formatJSON: \"SimpleJSON2\",\n            projectData: this._getResourcesFromGabarit(this.projectInfo.gabarit)\n        };\n        try {\n            let jsonObj = JSON.parse(JSON.stringify(objectData));\n            // console.log(jsonObj);\n            this.jx.db.saveJSON(fileURL, objectData, () => { callback(); });\n        }\n        catch (err) {\n            alert(\"Project can't be saved. an error occurs in json: \" + err.message);\n            //this.reload(()=>{});\n        }\n    }\n    _exportFonts(callback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let logPrefix = \"EXPORT FONTS\";\n            console.log(logPrefix);\n            // get all fonts used in project\n            console.log(logPrefix, \"gabarit\", this.projectInfo.gabarit);\n            let resources = this._getResourcesFromGabarit(this.projectInfo.gabarit);\n            console.log(logPrefix, \"resources\", resources);\n            let fontsNeeded = [];\n            for (let i = 0; i < resources.length; i++) {\n                const element = resources[i];\n                if (element.type == \"TextStyle\" && element.fontsList == \"fonts\") {\n                    fontsNeeded.push(element.value.fontFamily);\n                }\n            }\n            fontsNeeded = this.jx.tools.arr.removeDouble(fontsNeeded);\n            console.log(logPrefix, \"fontsNeeded\", fontsNeeded);\n            // get all global fonts needed\n            let globalFonts = this.jx.editor.getOptionsList().fontsDefs;\n            console.log(logPrefix, \"globalFonts\", globalFonts);\n            // check if all fonts exists in global\n            let notFoundFonts = [];\n            let fontsToCopy = [];\n            if (fontsNeeded.length === 0) {\n                callback();\n                return;\n            }\n            for (let i = 0; i < fontsNeeded.length; i++) {\n                const item = fontsNeeded[i];\n                let found = globalFonts.filter((value, index, array) => value.fontFamily == item);\n                if (found.length == 0) {\n                    notFoundFonts.push(item);\n                }\n                else {\n                    fontsToCopy.push(found[0]);\n                }\n            }\n            if (notFoundFonts.length > 0) {\n                this.editor.popup({\n                    title: \"Il y'a eu des erreurs lors de l'export\",\n                    content: `\n                    Les fontes suivantes, nécessaires au projet, n'ont pas été trouvées.\n                    <br>Les solutions possibles sont au choix :\n                    <br>- Ajouter les fontes manquantes aux fontes globales de l'editeur.\n                    <br>- Choisir une fonte existante\n                    <br><br>\n                ` + notFoundFonts.join(\"<br>\")\n                });\n            }\n            // copy needed fonts from resources to project (public/assets/fonts)\n            const globalFontsPath = \"/resources/milan-presse/fonts\";\n            const destPathes = [];\n            let importFontFaces = \"\";\n            let publicPath = this.projectInfo.url + \"/public\";\n            let cssPath = publicPath + \"/css\";\n            let assetsPath = publicPath + \"/assets\";\n            let destFontsPath = assetsPath + \"/fonts/_exported\";\n            yield this.editor.deleteDirPromise(destFontsPath);\n            for (let i = 0; i < fontsToCopy.length; i++) {\n                const fileName = fontsToCopy[i].fileName;\n                let destPath = destFontsPath + \"/\" + fileName;\n                let result = yield this.editor.cloneDirPromise({\n                    sourcePath: globalFontsPath + \"/\" + fileName,\n                    destPath\n                });\n                destPathes.push({\n                    fileName,\n                    destPath\n                });\n                importFontFaces += `@import url(\"./${fileName}/font.css\");\n            `;\n            }\n            console.log(logPrefix, \"FONTCOPIED\");\n            // generate public/css/fonts.css\n            yield this.jx.db.saveTextPromise(destFontsPath + \"/_DONT_TOUCH_.md\", DONT_TOUCH_FILE);\n            yield this.jx.db.saveTextPromise(destFontsPath + \"/generated_imports.css\", importFontFaces);\n            let toSave = GENERATED_IMPORT;\n            let fontsCSS = yield this.jx.db.loadTextPromise(cssPath + \"/fonts.css\");\n            console.log(logPrefix, fontsCSS);\n            if (!fontsCSS.error) {\n                toSave += fontsCSS.replace(/(?=\\/\\*EDITOR_START)(.|\\n)*?(?<=END\\*\\/)/g, \"\")\n                    .replace(/^(\\s)*/, \"\");\n            }\n            yield this.jx.db.saveTextPromise(cssPath + \"/fonts.css\", toSave);\n            console.log(fontsCSS);\n            callback();\n        });\n    }\n    _getResourcesFromGabarit(gabarit) {\n        var gabaritResources = [];\n        if (gabarit != null) {\n            // if(this.projectInfo.projectInformations.build && this.projectInfo.projectInformations.build.type == \"kimitest\") {\n            // \tthis._getKimiTestJson(gabarit);\n            // }\n            for (var i = 0; i < gabarit.length; i++) {\n                gabaritResources = gabaritResources.concat(this._getResourcesFromGroup(gabarit[i]));\n            }\n        }\n        return gabaritResources;\n    }\n    _getResourcesFromGroup(group, prefixID = \"\") {\n        var gabaritResources = [];\n        if (group != null) {\n            var item = null;\n            var itemClone = null;\n            //console.log(group.id)\n            if (group.type == \"DataObject\") {\n                var dataObject = {};\n            }\n            ;\n            var prefixGroup = (group.exportType || group.type == \"DataGroup\") ? prefixID + group.id + \".\" : prefixID;\n            for (var j = 0; j < group.children.length; j++) {\n                item = group.children[j];\n                if (item.activated == false)\n                    continue;\n                itemClone = {};\n                for (var prop in item) {\n                    itemClone[prop] = item[prop];\n                }\n                //-- delete uneeded properties\n                delete itemClone.description;\n                delete itemClone.editable;\n                delete itemClone.visible;\n                delete itemClone.preview;\n                delete itemClone.timestamp;\n                let type = item.exportType || item.type;\n                switch (type) {\n                    case \"Separator\":\n                        // ignore, do nothing\n                        break;\n                    case \"Sound\":\n                    case \"Image\":\n                    case \"Video\":\n                    case \"SpriteSheet\":\n                        itemClone.asset = {};\n                        for (var prop in item.asset) {\n                            itemClone.asset[prop] = item.asset[prop];\n                        }\n                        itemClone.asset.id = prefixGroup + item.id;\n                        itemClone.asset.type = type;\n                        itemClone.asset.start = item.start;\n                        itemClone.asset.end = item.end;\n                        itemClone.asset.preload = (item.asset.preload != undefined) ? item.asset.preload : true;\n                        //console.log(\"itemClone : \",itemClone.preload, \"item : \",item.asset.preload);\n                        itemClone.asset.src = \"assets/\" + item.asset.src;\n                        if (group.type == \"DataObject\") {\n                            dataObject[item.id] = itemClone.asset;\n                        }\n                        else {\n                            gabaritResources.push(itemClone.asset);\n                        }\n                        break;\n                    case \"ImageSequence\":\n                        itemClone.asset = {};\n                        for (var prop in item.asset) {\n                            itemClone.asset[prop] = item.asset[prop];\n                        }\n                        itemClone.asset.id = prefixGroup + item.id,\n                            itemClone.asset.type = type,\n                            itemClone.asset.preload = (item.asset.preload != undefined) ? item.asset.preload : true;\n                        itemClone.asset.src = \"assets/\" + item.asset.src;\n                        if (group.type == \"DataObject\") {\n                            dataObject[item.id] = itemClone.asset;\n                        }\n                        else {\n                            gabaritResources.push(itemClone.asset);\n                        }\n                        break;\n                    case \"Flashtml\":\n                        itemClone.asset = {};\n                        for (var prop in item.asset) {\n                            itemClone.asset[prop] = item.asset[prop];\n                        }\n                        itemClone.asset.id = prefixGroup + item.id,\n                            item.asset.compType = type,\n                            itemClone.asset.type = item.asset.type,\n                            itemClone.asset.preload = (item.asset.preload != undefined) ? item.asset.preload : true;\n                        itemClone.asset.src = \"assets/\" + item.asset.src;\n                        if (group.type == \"DataObject\") {\n                            dataObject[item.id] = itemClone.asset;\n                        }\n                        else {\n                            gabaritResources.push(itemClone.asset);\n                        }\n                        break;\n                    case \"Text\":\n                    case \"Parameter\":\n                        if (group.type == \"DataObject\") {\n                            dataObject[item.id] = itemClone.value;\n                        }\n                        else {\n                            itemClone.id = prefixGroup + itemClone.id;\n                            gabaritResources.push(itemClone);\n                        }\n                        break;\n                    case \"Number\":\n                        itemClone.value = Number(itemClone.value);\n                        if (group.type == \"DataObject\") {\n                            dataObject[item.id] = itemClone.value;\n                        }\n                        else {\n                            itemClone.id = prefixGroup + itemClone.id;\n                            gabaritResources.push(itemClone);\n                        }\n                        break;\n                    case \"ComboBox\":\n                        itemClone.type = \"*\";\n                        delete itemClone.options;\n                        if (group.type == \"DataObject\") {\n                            dataObject[item.id] = itemClone.value;\n                        }\n                        else {\n                            itemClone.id = prefixGroup + itemClone.id;\n                            gabaritResources.push(itemClone);\n                        }\n                        break;\n                    case \"class\":\n                        if (group.type == \"DataObject\") {\n                            dataObject[item.id] = itemClone.value;\n                        }\n                        else {\n                            delete itemClone.value;\n                            delete itemClone.data;\n                            itemClone.id = prefixGroup + itemClone.id;\n                            gabaritResources.push(itemClone);\n                        }\n                        break;\n                    case \"Group\":\n                    case \"DataObject\":\n                    case \"DataGroup\":\n                        gabaritResources = gabaritResources.concat(this._getResourcesFromGroup(item, prefixGroup));\n                        break;\n                    default:\n                        if (group.type == \"DataObject\") {\n                            dataObject[item.id] = itemClone.value;\n                        }\n                        else {\n                            itemClone.id = prefixGroup + itemClone.id;\n                            gabaritResources.push(itemClone);\n                        }\n                }\n            }\n            if (group.type == \"DataObject\") {\n                let preload = (group.preload != undefined) ? group.preload : false;\n                gabaritResources.push({ id: prefixID + group.id, type: \"DataObject\", value: dataObject, preload });\n            }\n        }\n        // console.log(gabaritResources);\n        return gabaritResources;\n    }\n    _getKimiTestJson(gabarit) {\n        for (var i = 0; i < gabarit.length; i++) {\n            if (gabarit[i].id == \"QUIZ\") {\n                var quizGroup = gabarit[i];\n            }\n            else if (gabarit[i].id == \"PROFILS\") {\n                var profilsGroup = gabarit[i];\n            }\n        }\n        var json = { titre: {}, questions: [], profils: {}, conclusions: {} };\n        var question;\n        for (var iq = 1; iq <= 10; iq++) {\n            question = { id: iq, text: this._getGroupChildByID(quizGroup, \"Q\" + this.jx.tools.gd(iq, 2) + \"_T\").value, answers: [] };\n            for (var ir = 1; ir <= 3; ir++) {\n                question.answers.push({ id: ir, text: this._getGroupChildByID(quizGroup, \"Q\" + this.jx.tools.gd(iq, 2) + \"_R\" + this.jx.tools.gd(ir, 2) + \"_T\").value, good: (ir == 1) });\n            }\n            ;\n            json.questions.push(question);\n        }\n        ;\n        json.titre = {\n            text: this._getGroupChildByID(quizGroup, \"Title\").value,\n            style: { \"fontName\": \"Harimau\", \"fontStyle\": \"normal\", \"fontSize\": \"30px\", \"color\": \"#000000\" }, \"offset\": { \"x\": 0, \"y\": 0 }\n        };\n        for (var ip = 1; ip <= 3; ip++) {\n            json.profils[ip] = this._getGroupChildByID(profilsGroup, \"PROFIL_0\" + ip + \"_T\").value;\n            json.conclusions[ip] = this._getGroupChildByID(profilsGroup, \"CONCLU_0\" + ip).value;\n        }\n        ;\n        // console.log(JSON.stringify(json, null, 4));\n        this.jx.db.saveText(this.projectInfo.url + \"/public/src/config.js\", \"var editorGameConfig=\" + JSON.stringify(json, null, 4), () => { });\n    }\n    _getGroupChildByID(group, childID) {\n        for (var i = 0; i < group.children.length; i++) {\n            if (group.children[i].id == childID) {\n                return group.children[i];\n            }\n        }\n        ;\n        return null;\n    }\n    _finish() {\n        this._destroy();\n        this.onFinished();\n    }\n    _destroy() {\n    }\n}\n"]}