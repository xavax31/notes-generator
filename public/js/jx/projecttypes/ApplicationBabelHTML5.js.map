{"version":3,"sources":["../../../src/jx/projecttypes/ApplicationBabelHTML5.js"],"names":["ApplicationBabelHTML5","dataObject","console","log","importer","jx","info","exporter","projectInfo","infos","url","configPath","json1Importer","importConfig","tools","mergeObjectIn","projectData","projectInformations","project","engine","gabarit","modules","results","_compareGabarits","gabarit1","gabarit2","i","length","g2","getInGabarit","id","timestamp","push","time","g1","value","children"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAGqBA,qB;;;AACjB,uCAAYC,UAAZ,EAAwB;AAAA;;AAAA,iJACdA,UADc;AAEvB;;;;sCACS;AACNC,wBAAQC,GAAR,CAAY,8BAAZ;AACA;AACA,qBAAKC,QAAL,GAAgB,uBAAa,KAAKC,EAAlB,EAAsB,KAAKC,IAA3B,CAAhB;AACA,qBAAKC,QAAL,GAAgB,uBAAa,KAAKF,EAAlB,EAAsB,EAAEG,aAAa,KAAKF,IAApB,EAAtB,CAAhB;AACH;;;0CACa;AAAA;;AACV,oBAAIG,QAAQ,EAAEC,KAAK,KAAKJ,IAAL,CAAUI,GAAjB,EAAsBC,YAAY,KAAKL,IAAL,CAAUI,GAAV,GAAgB,gCAAlD,EAAZ;AACA,oBAAIE,gBAAgB,uBAAa,KAAKP,EAAlB,EAAsBI,KAAtB,CAApB;AACAG,8BAAcC,YAAd,CAA2B,uBAAe;AACtCX,4BAAQC,GAAR,CAAY,iBAAZ;AACA,2BAAKE,EAAL,CAAQS,KAAR,CAAcC,aAAd,CAA4BN,KAA5B,EAAmCO,YAAYC,mBAAZ,CAAgCC,OAAnE;AACAT,0BAAMU,MAAN,GAAeH,YAAYC,mBAAZ,CAAgCE,MAA/C;AACAV,0BAAMW,OAAN,GAAgBJ,YAAYK,OAAZ,CAAoB,CAApB,EAAuBD,OAAvC;AACA,2BAAKE,OAAL,GAAe,EAAf;AACA,2BAAKC,gBAAL,CAAsBd,MAAMW,OAA5B,EAAqC,OAAKd,IAAL,CAAUc,OAA/C;AACAlB,4BAAQC,GAAR,CAAY,OAAKmB,OAAjB;AACH,iBARD;AASH;;;6CACgBE,Q,EAAUC,Q,EAAU;AACjCvB,wBAAQC,GAAR,CAAY,kBAAZ;;AAGA,qBAAK,IAAIuB,IAAI,CAAb,EAAgBA,IAAIF,SAASG,MAA7B,EAAqCD,GAArC,EAA0C;AACtC,wBAAI,IAAJ,EAAU,CAAG;AACb;AACA,wBAAIE,KAAK,KAAKC,YAAL,CAAkB,EAAEC,IAAIN,SAASE,CAAT,EAAYI,EAAlB,EAAsBV,SAASK,QAA/B,EAAlB,CAAT;AACAvB,4BAAQC,GAAR,CAAYqB,SAASE,CAAT,EAAYI,EAAxB,EAA4BF,EAA5B,EAAgCJ,SAASE,CAAT,CAAhC;AACAxB,4BAAQC,GAAR,CAAYyB,MAAMJ,SAASE,CAAT,CAAlB;AACA,wBAAIF,SAASE,CAAT,EAAYK,SAAhB,EAA2B;AACvB7B,gCAAQI,IAAR,CAAakB,SAASE,CAAT,EAAYI,EAAzB,EAA6B,GAA7B,EAAkCN,SAASE,CAAT,EAAYK,SAAZ,GAAwBH,GAAGG,SAA7D;AACA,4BAAIP,SAASE,CAAT,EAAYK,SAAZ,GAAwBH,GAAGG,SAA3B,IAAwC,CAA5C,EAA+C;AAC3C,iCAAKT,OAAL,CAAaU,IAAb,CAAkB,EAAEF,IAAIN,SAASE,CAAT,EAAYI,EAAlB,EAAsBG,MAAOT,SAASE,CAAT,EAAYK,SAAZ,GAAwBH,GAAGG,SAAxD,EAAoEG,IAAIV,SAASE,CAAT,EAAYS,KAApF,EAA2FP,IAAIA,GAAGO,KAAlG,EAAlB;AACH;AACD;AACH;AACD;AACA,wBAAIX,SAASE,CAAT,EAAYU,QAAhB,EAA0B;AACtB,6BAAKb,gBAAL,CAAsBC,SAASE,CAAT,EAAYU,QAAlC,EAA4CR,GAAGQ,QAA/C;AACH;AACD;AACH;AACD;AACH;;;;;;sBA/CgBpC,qB","file":"ApplicationBabelHTML5.js","sourcesContent":["import ApplicationBabelHTML5Base from \"jx/projecttypes/ApplicationBabelHTML5Base\";\nimport Importer from \"jx/projecttypes/editorformattype2/Importer\";\nimport Exporter from \"jx/projecttypes/editorformattype2/Exporter\";\nexport default class ApplicationBabelHTML5 extends ApplicationBabelHTML5Base {\n    constructor(dataObject) {\n        super(dataObject);\n    }\n    _create() {\n        console.log(\"ApplicationBabelHTML5 create\");\n        super._create();\n        this.importer = new Importer(this.jx, this.info);\n        this.exporter = new Exporter(this.jx, { projectInfo: this.info });\n    }\n    compareJSON() {\n        var infos = { url: this.info.url, configPath: this.info.url + \"/etc/editor/editor_server.json\" };\n        var json1Importer = new Importer(this.jx, infos);\n        json1Importer.importConfig(projectData => {\n            console.log(\"config imported\", this);\n            this.jx.tools.mergeObjectIn(infos, projectData.projectInformations.project);\n            infos.engine = projectData.projectInformations.engine;\n            infos.gabarit = projectData.modules[0].gabarit;\n            this.results = [];\n            this._compareGabarits(infos.gabarit, this.info.gabarit);\n            console.log(this.results);\n        });\n    }\n    _compareGabarits(gabarit1, gabarit2) {\n        console.log(\"_compareGabarits\");\n        //console.log(gabarit1)\n        //console.log(gabarit2)\n        for (var i = 0; i < gabarit1.length; i++) {\n            if (true) { }\n            ;\n            var g2 = this.getInGabarit({ id: gabarit1[i].id, gabarit: gabarit2 });\n            console.log(gabarit1[i].id, g2, gabarit1[i]);\n            console.log(g2 == gabarit1[i]);\n            if (gabarit1[i].timestamp) {\n                console.info(gabarit1[i].id, \":\", gabarit1[i].timestamp - g2.timestamp);\n                if (gabarit1[i].timestamp - g2.timestamp != 0) {\n                    this.results.push({ id: gabarit1[i].id, time: (gabarit1[i].timestamp - g2.timestamp), g1: gabarit1[i].value, g2: g2.value });\n                }\n                ;\n            }\n            ;\n            if (gabarit1[i].children) {\n                this._compareGabarits(gabarit1[i].children, g2.children);\n            }\n            ;\n        }\n        ;\n    }\n}\n"]}