{"version":3,"sources":["../../../../src/jx/core/utils/Tools.js"],"names":["jxtools","lettersAlphabet","Tools","cjs","CJS","str","StringFunctions","obj","ObjectFunctions","arr","ArrayFunctions","math","MathFunctions","date","DateFunctions","color","ColorFunctions","intValue","numLetters","intValueToString","String","intValueToStringLength","length","result","i","unshift","undefined","join","intToString","element","Array","isArray","letterStart","letterEnd","forEachFunction","letterStartLowCase","toLowerCase","upperCase","letterEndLowCase","indexStart","getLetterIndex","indexEnd","getLetterFromIndex","toUpperCase","sPageURL","window","location","search","substring","sURLVariables","split","sParameterName","url","id","open","array","value","$","inArray","unique","current","indexOf","push","object","Object","prototype","toString","call","referenceObject","objectToMerge","prop","mergeObject","instanceType","mergeObjectIn","obj1","obj2","defaultValueObject","objectToComplete","assign","clone","cloneObject","objects","objectRef","charAt","slice","index","num","char","maxChar","replace","stringRepeat","letter","string","mode","a","numberChar","letterChar","replaceCharByLetter","replaceCharByNumber","capitalize","merge","filterObj","target","source","properties","props","forEach","item","trim","start","end","replaceChar","jx","tools","forChar","RegExp","console","error","lList","randomList","randomPos","boucleLength","randomValue","splice","mc","pattern","regExp","children","child","name","movieClip","rec","createjs","DisplayObject","arrangeFlashClipsNames","parent","path","min","max","randomNum","Math","floor","random","pt1","pt2","sqrt","pow","x","y","rad","PI","Date","timestamp","now","fr","toLocaleString","utc","toUTCString","file","getFullYear","Number","getMonth","getDate","getHours","getMinutes","getSeconds","hex","alpha","r","parseInt","g","b"],"mappings":"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","file":"Tools.js","sourcesContent":["let jxtools;\nlet lettersAlphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n/**\n * Many useful global functions.\n * @example\n * var result = this.jx.tools.gd(3, 2);\n */\nexport default class Tools {\n    constructor() {\n        /** createJS methods */\n        this.cjs = CJS;\n        /** string methods */\n        this.str = StringFunctions;\n        /** object methods */\n        this.obj = ObjectFunctions;\n        /** array methods */\n        this.arr = ArrayFunctions;\n        /** math methods */\n        this.math = MathFunctions;\n        /** date methods */\n        this.date = DateFunctions;\n        /** Colors functions */\n        this.color = ColorFunctions;\n        jxtools = this;\n    }\n    /**\n    * Convert an integer intValue into string of numLetters characters.\n    * @param {number} intValue\n    * @param {number} numLetters\n    * @return {string}\n    * @example\n    * console.log((this.jx.tools.intToString(1, 2)); // return string '01'\n    */\n    intToString(intValue, numLetters) {\n        var intValueToString = String(intValue);\n        var intValueToStringLength = intValueToString.length;\n        var result = [];\n        for (var i = 0; i < numLetters; i++) {\n            result.unshift((intValueToString[intValueToStringLength - 1 - i] == undefined ? \"0\" : intValueToString[intValueToStringLength - 1 - i]));\n        }\n        ;\n        return result.join(\"\");\n    }\n    /**\n    * Shortcut for {@link Tools.intToString}.\n    * @return {string}\n    */\n    gd(...args) {\n        return this.intToString(...args);\n    }\n    /**\n    * Get instance type of element : \"array\", \"string\", \"number\", \"boolean\", \"function\", all others == \"object\".\n    * @example\n    * if (this.jx.tools.instanceType(element)==\"array\")) { ... }\n    */\n    instanceType(element) {\n        if (Array.isArray(element))\n            return \"array\";\n        return typeof element;\n    }\n    /**\n     * Equivalent to 'for to' loop but with letter.\n     * case (upper or low) of letterStart determine the case of returned letter.\n     * @example\n     *      jx.tools.forChar(\"A\", \"C\", (letter)=>{\n     *         console.log(letter); // A, B, C\n     *      });\n     *\n     * @param  {String} letterStart\n     * @param  {String} letterEnd\n     * @param  {Function} forEachFunction\n     */\n    forChar(letterStart, letterEnd, forEachFunction) {\n        let letterStartLowCase = letterStart.toLowerCase();\n        let upperCase = letterStartLowCase !== letterStart;\n        let letterEndLowCase = letterEnd.toLowerCase();\n        let indexStart = this.str.getLetterIndex(letterStartLowCase);\n        let indexEnd = this.str.getLetterIndex(letterEndLowCase);\n        for (var i = indexStart; i <= indexEnd; i++) {\n            forEachFunction(upperCase\n                ? this.str.getLetterFromIndex(i).toUpperCase()\n                : this.str.getLetterFromIndex(i), i);\n        }\n        ;\n    }\n    /**\n     * Return un object with all parameters GET in the url of current page.\n      * @example\n      * console.log(this.jx.tools.getURLParameters());\n    */\n    getURLParameters() {\n        var sPageURL = window.location.search.substring(1);\n        var sURLVariables = sPageURL.split('&');\n        var result = {};\n        for (var i = 0; i < sURLVariables.length; i++) {\n            var sParameterName = sURLVariables[i].split('=');\n            result[sParameterName[0]] = sParameterName[1];\n        }\n        return result;\n    }\n    /** Open a new browser's window or tab.\n    * @param {string} url\n    * @param {string} id - unique id of window\n    * @example\n    * this.jx.tools.openURL(\"http://...\", \"MyWindowID\");\n    */\n    openURL(url, id = null) {\n        window.open(url, id);\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    arrayContains(array, value) {\n        return $.inArray(value, array);\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    arrayContainsAllIdentical(array) {\n        for (var i = 1; i < array.length; i++) {\n            if (array[i] != array[0]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    arrayRemoveDouble(array) {\n        var unique = [];\n        for (var i = 0; i < array.length; i++) {\n            var current = array[i];\n            if (unique.indexOf(current) < 0)\n                unique.push(current);\n        }\n        return unique;\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    makeArrayIfSingleObject(object) {\n        if (Object.prototype.toString.call(object) !== '[object Array]') {\n            object = [object];\n        }\n        return object;\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    mergeObject(referenceObject, objectToMerge) {\n        //console.log(referenceObject, objectToMerge);\n        if (objectToMerge && referenceObject) {\n            for (var prop in objectToMerge) {\n                if (objectToMerge[prop] != undefined) {\n                    if (!Array.isArray(referenceObject[prop]) && typeof referenceObject[prop] == 'object'\n                        && referenceObject[prop] != null) { // if value is an object not null, we scan it recursively\n                        this.mergeObject(referenceObject[prop], objectToMerge[prop]);\n                    }\n                    else {\n                        referenceObject[prop] = objectToMerge[prop];\n                    }\n                }\n            }\n        }\n        return referenceObject;\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    mergeObjectIn(referenceObject = {}, objectToMerge = {}) {\n        //console.log(referenceObject, objectToMerge);\n        if (objectToMerge && referenceObject) {\n            for (var prop in objectToMerge) {\n                if (objectToMerge[prop] != undefined && this.instanceType(objectToMerge[prop]) == 'object') {\n                    referenceObject[prop] = referenceObject[prop] || {};\n                    this.mergeObjectIn(referenceObject[prop], objectToMerge[prop]);\n                }\n                else {\n                    referenceObject[prop] = objectToMerge[prop];\n                }\n            }\n        }\n        return referenceObject;\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    updateObject(obj1, obj2) {\n        for (var prop in obj1) {\n            if (obj2[prop] !== undefined) {\n                obj1[prop] = obj2[prop];\n            }\n            ;\n        }\n        return obj1;\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    fillObject(defaultValueObject, objectToComplete) {\n        return Object.assign(defaultValueObject, objectToComplete);\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    cloneObject(object) {\n        var clone = {};\n        var prop;\n        for (prop in object) {\n            if (this.instanceType(object[prop]) == \"object\") {\n                clone[prop] = this.cloneObject(object[prop]);\n            }\n            else {\n                clone[prop] = object[prop];\n            }\n        }\n        ;\n        return clone;\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    testObjectsEgality(objects) {\n        var objectRef = objects[0];\n        for (var i = 1; i < objects.length; i++) {\n            for (var prop in objects[i]) {\n                if (objectRef[prop] != objects[i][prop]) {\n                    return false;\n                }\n                ;\n            }\n        }\n        return true;\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    capitalizeEachWord(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    getLetterFromIndex(index) {\n        return lettersAlphabet[index];\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    replaceCharByNumber(str, num = 0, char = \"#\", maxChar = 4) {\n        if (!str)\n            return str;\n        var result = str;\n        for (var i = maxChar; i > 0; i--) {\n            result = result.replace(this.stringRepeat(char, i), this.intToString(num, i));\n        }\n        ;\n        return result;\n    }\n    /**\n     * @deprecated\n     * @ignore\n     */\n    stringRepeat(str, num) {\n        //--- new es6 str.repeat(num) func doesn't work in ipad3 safari.\n        var result = \"\";\n        for (var i = 0; i < num; i++) {\n            result += str;\n        }\n        return result;\n    }\n}\n/** Strings Functions */\nexport class StringFunctions {\n    /**\n     * Get lowercase character of index 'index' in alphabet (index 0 == \"a\").\n     * @param  {Number} index\n     * @return {String}\n     */\n    static getLetterFromIndex(index) {\n        return lettersAlphabet[index];\n    }\n    /**\n     * Return index of letter in alphabet (0, ...)\n     * @param  {String} letter\n     * @return {Number}\n     */\n    static getLetterIndex(letter) {\n        return lettersAlphabet.indexOf(letter.toLowerCase());\n    }\n    /**\n     * Return string after capitalize each word.\n     * @param  {string} str\n     * @return {string}\n     */\n    static capitalizeEachWord(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    /**\n     * Replace char in string with formatted number.\n     * @example\n     * var result = this.jx.tools.replaceCharByNumber(\"images/myimg_##\", 2, \"#\");\n     * // result = \"images/myimg_02\"\n     *\n     * @param  {String} str\n     * @param  {Number} num\n     * @param  {String} char    char to replace. Default = #\n     * @param  {Number} maxChar max chain of char possible. Default to 4\n     * @return {String}\n     */\n    static replaceCharByNumber(str, num = 0, char = \"#\", maxChar = 4) {\n        if (!str)\n            return str;\n        var result = str, i;\n        for (i = maxChar; i > 0; i--) {\n            result = result.replace(StringFunctions.stringRepeat(char, i), jxtools.intToString(num, i));\n        }\n        ;\n        return result;\n    }\n    /**\n     * Replace char in string with letter of index 'letter'.\n     * @example\n     * var result = this.jx.tools.replaceCharByLetter({string: \"clipZone#\", letter: 3, mode: \"uppercase\"});\n     * // result = \"clipZoneD\"\n     *\n     * @param  {String} options.string\n     * @param  {Number} options.letter letter or letter index to use as replacement\n     * @param  {String} options.char   the char to replace\n     * @param  {String} options.mode   mode: \"lowercase\" (default), \"uppercase\" (replaced letter is lowercase , uppercase)\n     * @param  {String} options.a   beginning index for letter A (0 or 1)\n     * @return {String}\n     */\n    static replaceCharByLetter({ string, letter = 0, char = \"#\", mode = \"lowercase\", a = 0 }) {\n        if (!string)\n            return string;\n        if (typeof letter == \"number\") {\n            letter = StringFunctions.getLetterFromIndex(letter - a);\n        }\n        switch (mode) {\n            case \"lowercase\":\n                letter = letter.toLowerCase();\n                break;\n            case \"uppercase\":\n                letter = letter.toUpperCase();\n                break;\n            default:\n        }\n        return string.replace(char, letter);\n    }\n    /**\n     * replaceChar, similar to chain replaceCharByLetter and replaceCharByNumber in an unique function.\n     * @example\n     * var result = this.jx.tools.replaceChar({string: \"clipZone£_##\", index: 3, mode: \"uppercase\"});\n     * // result = \"clipZoneD_03\"\n     *\n     * @param  {String} options.string     string to replace\n     * @param  {Number} options.index      num value to use as replacement\n     * @param  {String} options.numberChar char used as pattern for number (default #)\n     * @param  {String} options.letterChar char used as pattern for letter (default £)\n     * @param  {String} options.mode        mode: \"lowercase\" (default), \"uppercase\" (replaced letter is lowercase , uppercase)\n     * @param  {Number} options.a          index of letter 'a' (default 0)\n     * @return {String}\n     */\n    static replaceChar({ string, index = 0, numberChar = \"#\", letterChar = \"£\", mode = \"none\", a = 0 }) {\n        return StringFunctions.replaceCharByLetter({\n            string: StringFunctions.replaceCharByNumber(string, index, numberChar),\n            letter: index,\n            char: letterChar,\n            mode: mode,\n            a: a\n        });\n    }\n    static underscoreToCamelCase(string) {\n        let result = \"\";\n        let capitalize = false;\n        for (let i = 0; i < string.length; i++) {\n            if (string[i] == \"_\") {\n                capitalize = true;\n            }\n            else {\n                if (capitalize) {\n                    result += string[i].toUpperCase();\n                    capitalize = false;\n                }\n                else {\n                    result += string[i].toLowerCase();\n                }\n            }\n        }\n        ;\n        return result;\n    }\n    /**\n     * Return a string composed of str x num.\n     * @param  {string} str\n     * @param  {number} num\n     * @return {string}\n     */\n    static stringRepeat(str, num) {\n        //--- new es6 str.repeat(num) func doesn't work in ipad3 safari.\n        var result = \"\";\n        for (var i = 0; i < num; i++) {\n            result += str;\n        }\n        return result;\n    }\n}\n/** Objects Functions */\nexport class ObjectFunctions {\n    /**\n     * Create a new object from merging obj2 in obj1.\n     * Each property of obj2 is added/replaced in obj1.\n     * If a property is an object, merge depends of mergeObject argument. If true, the object is reccursively merged in obj1. If false, only the reference to the object is merge in obj1\n     * @param  {Object} obj1\n     * @param  {Object} obj2\n     * @param  {Boolean} mergeObject\n     * @return {Object}\n     */\n    static merge(obj1, obj2, mergeObject = false) {\n        for (var prop in obj2) {\n            if (obj1[prop] != undefined) {\n                if (mergeObject && !Array.isArray(obj1[prop]) && typeof obj1[prop] == 'object'\n                    && obj1[prop] != null) { // if value is an object not null, we scan it recursively\n                    ObjectFunctions.merge(obj1[prop], obj2[prop], mergeObject);\n                }\n                else {\n                    obj1[prop] = obj2[prop];\n                }\n            }\n            else {\n                obj1[prop] = obj2[prop];\n            }\n        }\n        return obj1;\n    }\n    /** */\n    static clone(object) {\n        var clone = {};\n        for (var prop in object) {\n            if (this.instanceType(object[prop]) == \"object\") {\n                clone[prop] = this.cloneObject(object[prop]);\n            }\n            else {\n                clone[prop] = object[prop];\n            }\n        }\n        ;\n        return clone;\n    }\n    /**\n     * This return only properties of obj defined in filterObj,\n     * then none new property from obj1 is added. Useful to take only needed properties of a dataObject.\n     * @param  {object} obj1 object to complete\n     * @param  {object} filterObj\n     * @return {object} filterObj filled\n     */\n    static filter(obj, filterObj) {\n        for (var prop in filterObj) {\n            if (obj[prop] !== undefined) {\n                filterObj[prop] = obj[prop];\n            }\n            ;\n        }\n        return filterObj;\n    }\n    /** Check if objects are identics (test only first level properties) */\n    static egality(objects) {\n        var objectRef = objects[0];\n        for (var i = 1; i < objects.length; i++) {\n            for (var prop in objects[i]) {\n                if (objectRef[prop] != objects[i][prop]) {\n                    return false;\n                }\n                ;\n            }\n        }\n        return true;\n    }\n    /**\n     * Add/replace properties in target by those are in source.\n     * @example\n     * let source = {name: \"Bill\", age: 15, sex: \"M\"};\n     * let target = {name: \"Pierre\"};\n     * jx.tools.addObjectProperties(target, source, \"age,sex\");\n     * console.log(target) // {name: \"Pierre\", age: 15, sex: \"M\"}\n     *\n     * @param {[type]} target     [description]\n     * @param {[type]} source     [description]\n     * @param {String} properties [description]\n     */\n    static addObjectProperties(target, source, properties = \"*\") {\n        let props;\n        if (properties != \"*\") {\n            props = properties.split(\",\");\n            props.forEach((item, index, array) => {\n                array[index] = item.trim();\n            });\n        }\n        else {\n            props = \"*\";\n        }\n        for (let prop in source) {\n            if (props == \"*\" || props.indexOf(prop) !== -1) {\n                target[prop] = source[prop];\n            }\n            ;\n        }\n        return target;\n    }\n    /**\n     * Add properties to obj, depends of arguments.\n     * @example\n     * let obj = jx.tools.createPropertiesFromPattern({id: \"zone£, start: \"A\", end: \"C\", value: true});\n     * // obj = {zoneA: true, zoneB: true, zoneC: true}\n     *\n     * let obj = jx.tools.createPropertiesFromPattern({id: \"zone£, start: 2, end: 4, value: {p1: \"hello\"}});\n     * // obj = {zoneC: {p1: \"hello\"}, zoneD: {p1: \"hello\"}, zoneE: {p1: \"hello\"}}\n     *\n     * let obj = jx.tools.createPropertiesFromPattern({id: \"zone##, start: 0, end: 3, value: 12});\n     * // obj = {zone00: 12, zone01: 12, zone02: 12}\n     *\n     * @param  {string} options.id\n     * @param  {number|string} options.start\n     * @param  {number|string} options.end\n     * @param  {[any]} options.value\n     * @return {Object}   the object obj provided as argument or an empty object if null.\n     */\n    static createPropertiesFromPattern({ obj = {}, string, start, end, value = null, mode = \"none\", a = 0 }) {\n        if (typeof start === \"number\" && typeof end === \"number\") {\n            for (var i = start; i <= end; i++) {\n                obj[jxtools.str.replaceChar({ string: string, index: i, mode, a })] = value;\n            }\n        }\n        else if (typeof start === \"string\" && typeof end === \"string\") {\n            jx.tools.forChar(start, end, (letter, index) => {\n                obj[string.replace(new RegExp(\"£\", \"g\"), letter)] = value;\n            });\n        }\n        else {\n            console.error(\"Tools.createPropertiesFromPattern: wrong parameters\");\n        }\n        return obj;\n    }\n}\n/** Arrays Functions */\nexport class ArrayFunctions {\n    /**\n     * If array contains value, return the index of value in array,\n     * else return -1\n     * @param  {Array} array\n     * @param  {any} value\n     * @return {Number}\n     */\n    static contains(array, value) {\n        return $.inArray(value, array);\n    }\n    /**\n     * Return true if all elements of array are identics (no strict equality)\n     * @param  {Array} array\n     * @return {Boolean}\n     */\n    static containsAllIdentical(array) {\n        for (var i = 1; i < array.length; i++) {\n            if (array[i] != array[0]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Remove all doubles in array. A new array is returned without modifying provided array.\n     * @param  {Array} array\n     * @return {Array}\n     */\n    static removeDouble(array) {\n        var unique = [];\n        for (var i = 0; i < array.length; i++) {\n            var current = array[i];\n            if (unique.indexOf(current) < 0)\n                unique.push(current);\n        }\n        return unique;\n    }\n    /**\n     * If object is already an array, this function just return it, else return the array [object]\n     * Useful for functions which need always an array of items as argument.\n     * @param  {Array|Object} object\n     * @return {Array}\n     */\n    static makeArrayIfSingleObject(object) {\n        if (Object.prototype.toString.call(object) !== '[object Array]') {\n            object = [object];\n        }\n        return object;\n    }\n    /**\n     * Return a randomised copy of array. array is not modified.\n     * @param  {array} array\n     * @return {array}\n     */\n    static randomise(array) {\n        var lList = array.slice();\n        var randomList = [];\n        var randomPos;\n        var boucleLength = lList.length;\n        for (var i = 0; i < boucleLength; i++) {\n            randomPos = MathFunctions.randomValue(0, lList.length - 1);\n            randomList.push(lList[randomPos]);\n            lList.splice(randomPos, 1);\n        }\n        return randomList;\n    }\n}\n/** Createjs tools functions */\nexport class CJS {\n    /**\n     * Return an array of all children of mc with name matching pattern (RegExp string).\n     * @param  {createjs.MovieClip} mc\n     * @param  {string} pattern\n     * @return {array}\n     */\n    static getChildrenByName(mc, pattern) {\n        var result = [];\n        var regExp = new RegExp(pattern, \"g\");\n        for (var i = 0; i < mc.children.length; i++) {\n            var child = mc.children[i];\n            if (child.name != null && child.name.search(regExp) != -1) {\n                result.push(child);\n            }\n        }\n        ;\n        return result;\n    }\n    /**\n     * Corrige les noms des clips dans l'export html5 de Flash.\n     * Lors de l'export Flash vers html5, les noms des clips sont référencés comme variable dans le clip parent, mais clip.name est null. Donc parent.getChildByName(\"NomClip\") return null même si le clip est bien nommé \"NomClip\" dans le fla.\n     * L'appel de cette fonction sur un clip corrige ceci en remplissant la variable name de tous ces enfants selon les références trouvées.\n     * @param  {createjs.MovieClip} movieClip\n     */\n    static arrangeFlashClipsNames(movieClip, rec = 4) {\n        for (var prop in movieClip) {\n            if (prop != \"parent\" && prop != \"shape\" && movieClip[prop] instanceof createjs.DisplayObject) {\n                movieClip[prop].name = prop;\n                if (rec > 0 && movieClip[prop].children != undefined) {\n                    CJS.arrangeFlashClipsNames(movieClip[prop], rec - 1);\n                }\n                ;\n                //console.Clip\"arrangeFlashClipsNames \" +  movieClip[ prop ].name );\n            }\n            ;\n        }\n        ;\n    }\n    /**\n     * Return the absolute path of movieClip with dot of movieclip in display list.\n     * @param  {createjs.MovieClip} movieClip\n     * @return {string}\n     */\n    static getAbsolutePath(movieClip) {\n        let parent = movieClip.parent;\n        let path = movieClip.name;\n        while (parent) {\n            path = parent.name + \".\" + path;\n            parent = parent.parent;\n        }\n        return path;\n    }\n}\n/**  */\nexport class MathFunctions {\n    /**\n     * Return an int value sorted randomly between min and max.\n     * @param  {int} min\n     * @param  {int} max\n     * @return {int}\n     */\n    static randomValue(min, max) {\n        var randomNum = Math.floor(Math.random() * (max - min + 1)) + min;\n        return randomNum;\n    }\n    /**\n     * Return distance between two points.\n     * pt1 and pt2 can be any object with x and y properties.\n     * @param  {object} pt1\n     * @param  {object} pt2\n     * @return {number}\n     */\n    static distance(pt1, pt2) {\n        return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n    }\n    /**\n     * converts radians to degrees.\n     * @param  {number} rad\n     * @return {number}\n     */\n    static radian2degrees(rad) {\n        return rad * 180 / Math.PI;\n    }\n}\n/** Date functions */\nexport class DateFunctions {\n    /**\n     * Return an object with differents usuals formats of today date.\n     * The returned object is contains:\n     * @example\n     * {\n     *     timestamp    // time in ms\n     *     fr           // 21/12/2014 04:00:00\n     *     utc          // Mon, 03 Jul 2006 21:44:38 GMT\n     *     file         // 2014-12-21-04h00m00s useful to add to the name of a file which needs date\n     * }\n     * @return {Object}\n     */\n    static getToday() {\n        var date = new Date();\n        return {\n            timestamp: Date.now(),\n            // fr format\n            fr: date.toLocaleString(),\n            // fr format\n            utc: date.toUTCString(),\n            // to add to file name, inversed for better natural sort in explorer or files listing.\n            file: date.getFullYear() + \"-\" + Number(date.getMonth() + 1) + \"-\" + date.getDate() + \"-\" + Number(date.getHours() + 1) + \"h\" + Number(date.getMinutes() + 1) + \"m\" + Number(date.getSeconds() + 1) + \"s\"\n        };\n    }\n}\nexport class ColorFunctions {\n    static hexToRGB(hex, alpha) {\n        var r = parseInt(hex.slice(1, 3), 16), g = parseInt(hex.slice(3, 5), 16), b = parseInt(hex.slice(5, 7), 16);\n        return { r, g, b, alpha };\n    }\n}\n"]}