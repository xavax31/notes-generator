{"version":3,"sources":["../../../src/jx/core/Factory.js"],"names":["shortcuts","Visual","Factory","jx","_uniqID","defaultComponents","_killed","dataObject","parentComponent","isJXComponent","tools","instanceType","db","findOne","id","data","comps","i","length","push","createComp","Object","assign","_deductComponentTypeToUse","componentClass","_getClassComponentToUse","type","window","_lastJX","_lastRender","render","comp","resourceID","rid","undefined","resource","compType","toLowerCase","res2","mergeObject","debug","error","config","app","defaultRenderers","defaultViewType","className","console","warn"],"mappings":"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","file":"Factory.js","sourcesContent":["let shortcuts = {\n    Visual: \"VisualComponent\"\n};\nexport default class Factory {\n    constructor(jx) {\n        this.jx = jx;\n        this._uniqID = 0;\n        this.defaultComponents = {\n            \"image\": \"Image\",\n            \"video\": \"Video\",\n            \"imagesequence\": \"ImageSequence\",\n            \"text\": \"Text\",\n            \"flashtml\": \"Clip\"\n        };\n    }\n    kill() {\n        if (this._killed)\n            return;\n        this._killed = true;\n        this.jx = null;\n    }\n    /** */\n    createComp(dataObject = {}) {\n        //console.group(\"Factory.createComp\", dataObject);\n        dataObject.parentComponent = dataObject.parentComponent || null;\n        if (dataObject.isJXComponent) { // if arg is Component, we juste add it to _children\n            return dataObject;\n        }\n        else if (this.jx.tools.instanceType(dataObject) == \"string\") { // resourceID string given as argument.\n            dataObject = this.jx.db.findOne({ id: dataObject }).data;\n        }\n        if (this.jx.tools.instanceType(dataObject) == \"array\") { // array of comps to create.\n            let comps = [];\n            for (var i = 0; i < dataObject.length; i++) {\n                comps.push(this.createComp(dataObject[i]));\n            }\n            ;\n            return comps;\n        }\n        dataObject = Object.assign({}, dataObject); // Clone first level only of dataObject for not touch original dataObject.\n        dataObject = this._deductComponentTypeToUse(dataObject);\n        let componentClass = this._getClassComponentToUse(dataObject);\n        // jx is passed here, from component to component at creation\n        dataObject.jx = this.jx;\n        dataObject.id = dataObject.id || ((typeof dataObject.type == \"string\" ? dataObject.type : \"Component\") + (++this._uniqID));\n        // keep in global last jx and last render used\n        window[\"jx\"]._lastJX = this.jx;\n        window[\"jx\"]._lastRender = dataObject.render;\n        var comp = new componentClass(dataObject);\n        return comp;\n    }\n    _deductComponentTypeToUse(dataObject) {\n        // if type not defined, then type is automatically deduct from criteria.\n        dataObject.type = dataObject.type || \"auto\";\n        dataObject.type = shortcuts[dataObject.type] || dataObject.type; // allow shortcuts\n        if (dataObject.resourceID || dataObject.rid)\n            dataObject.resourceID = dataObject.resourceID || dataObject.rid; //allow both writing resourceID or rid\n        delete dataObject.rid;\n        if (dataObject.type == \"auto\" && dataObject.resourceID == undefined) {\n            dataObject.type = \"Component\";\n        }\n        else {\n            //console.log(dataObject)\n            if (dataObject.type == \"auto\" || dataObject.type == \"VisualComponent\" || dataObject.type == \"Animation\") { // if no type or 'auto'\n                // if resourceID passed as argument, we replace dataObject.type with 'type' of resource of id resourceID\n                // and we merge resource info in dataObject\n                var resource = this.jx.db.findOne({ id: dataObject.resourceID });\n                if (resource != null) {\n                    dataObject.type = resource.compType || this.defaultComponents[resource.type] || resource.type;\n                    if (resource.data != null) {\n                        // if resource is a DataObject, we take the type of resourceID property of the DataObject\n                        if (dataObject.type.toLowerCase() == \"dataobject\" || dataObject.type == \"FlashtmlPack\" || dataObject.type == \"FlashtmlResource\") {\n                            var res2 = this.jx.db.findOne({ id: resource.data.resourceID });\n                            dataObject.type = this.defaultComponents[res2.type] || res2.type;\n                            dataObject = this.jx.tools.mergeObject(dataObject, resource.data);\n                        }\n                        ;\n                    }\n                    ;\n                }\n                else {\n                    // console.groupEnd(\"Factory.createComp\");\n                    this.jx.debug.error(\"Component type not defined in createComp\", dataObject, resource);\n                    return;\n                }\n            }\n        }\n        return dataObject;\n    }\n    _getClassComponentToUse(dataObject) {\n        let componentClass;\n        // depends of typeof 'type', we determine wich Component Class use.\n        switch (jx.tools.instanceType(dataObject.type)) {\n            case \"string\": // type is a string\n                // we determine which Component type is used by default for this type.\n                //dataObject.type = this.defaultComponents[dataObject.type] || dataObject.type;\n                // we determine with type of render to use (CJS,DOM,...), needed for visual components\n                dataObject.render = (this.jx.config.app.defaultRenderers[dataObject.type.toLowerCase()]\n                    || dataObject.render\n                    || (dataObject.parentComponent ? dataObject.parentComponent.render : false)\n                    || this.jx.config.app.defaultViewType);\n                // we determine class name by adding render to type string : ex: Image type become ImageCJS or ImageDOM\n                var className = dataObject.type + dataObject.render;\n                // if (dataObject.type==\"Text\"){\n                //     className = \"TextMultiRender\";\n                // }\n                // we get the class of name className. If not found, we get class of name dataObject.type. ex: MyCompCJS doesn't exist, but MyComp exists and is used. This mean that MyComp is not render-dependant or that its version for support this render type is not yet implemented.\n                componentClass = this.jx.comp[className] || this.jx.comp[dataObject.type]; // || this.jx.comp[\"editionitems.\" + dataObject.type];\n                break;\n            default: // class directly passed\n                componentClass = dataObject.type;\n                break;\n        }\n        if (componentClass == null) {\n            console.warn(\"Component type not exists\", dataObject);\n        }\n        return componentClass;\n    }\n}\n"]}