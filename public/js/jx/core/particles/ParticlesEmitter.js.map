{"version":3,"sources":["../../../../src/jx/core/particles/ParticlesEmitter.js"],"names":["particlesEmitterDefaults","type","ParticlesEmitter","dataObject","Object","assign","tempData","onFinished","signals","Signal","_create","_activated","_listeners","draw","evt","_draw","context","targetView","canvas","getContext","particleImage","image","particles","maxParticles","posX","posY","particleSize","explosionSize","lifetime","speed","gravity","i","j","length","push","Particle","Math","random","leavingParticles","moves","x","xunits","y","yunits","life","unshift","globalAlpha","drawImage","floor","width","height","value","createjs","Ticker","addEventListener","removeEventListener","angle","radians","PI","cos","sin"],"mappings":"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","file":"ParticlesEmitter.js","sourcesContent":["import VisualComponent from \"jx/core/comps/VisualComponent\";\nlet particlesEmitterDefaults = {\n    type: \"\"\n};\nexport default class ParticlesEmitter extends VisualComponent {\n    constructor(dataObject) {\n        super(Object.assign(particlesEmitterDefaults, dataObject));\n        this.tempData = {};\n        this.onFinished = new signals.Signal();\n        this._create();\n        this._activated = false;\n        this._listeners = {\n            draw: (evt) => this._draw()\n        };\n    }\n    _create() {\n        this.context = this.dataObject.targetView.canvas.getContext('2d');\n        this.particleImage = this.dataObject.image;\n        this.particles = [];\n        this.maxParticles = 10;\n    }\n    set active(value) {\n        if (value == this._activated)\n            return;\n        this._activated = value;\n        if (value) {\n            createjs.Ticker.addEventListener(\"tick\", this._listeners.draw);\n        }\n        else {\n            createjs.Ticker.removeEventListener(\"tick\", this._listeners.draw);\n        }\n    }\n    createExplosion(posX, posY, particleSize, explosionSize, lifetime, speed, gravity) {\n        // On calcule les coordonées où dessiner la particule afin de la centrer sur la position demandée \n        posX = posX - particleSize * .5;\n        posY = posY - particleSize * .5;\n        var speed = particleSize * speed * .01;\n        for (var i = 1; i < explosionSize; i++) {\n            for (var j = 0; j < (1 * i); j++) {\n                if (this.particles.length < this.maxParticles) {\n                    this.particles.push(new Particle(posX, posY, particleSize, particleSize, i * speed, gravity, lifetime * Math.random()));\n                }\n            }\n        }\n    }\n    _draw() {\n        //console.log(\"draw\",this.particles.length)\n        var leavingParticles = [];\n        for (var i = this.particles.length - 1; i >= 0; i--) {\n            this.particles[i].moves++;\n            this.particles[i].x += this.particles[i].xunits;\n            this.particles[i].y += this.particles[i].yunits + (this.particles[i].gravity * this.particles[i].moves);\n            if (this.particles[i].moves < this.particles[i].life) {\n                leavingParticles.unshift(this.particles[i]);\n                this.context.globalAlpha = 1 - this.particles[i].moves / this.particles[i].life;\n                this.context.drawImage(this.particleImage, Math.floor(this.particles[i].x), Math.floor(this.particles[i].y), this.particles[i].width, this.particles[i].height);\n                this.context.globalAlpha = 1;\n            }\n        }\n        this.particles = leavingParticles;\n    }\n}\nclass Particle {\n    constructor(x, y, width, height, speed, gravity, life) {\n        var angle = Math.floor(Math.random() * 360);\n        var radians = angle * Math.PI / 180;\n        // Coordonées en x et y de la dernière position affichée \n        this.x = x;\n        this.y = y;\n        // Hauteur et largeur de la particule en pixels \n        this.height = height;\n        this.width = width;\n        // Vitesse de déplacement de la particule \n        this.speed = speed;\n        // Valeur de la gravitée appliquée sur les particules \n        this.gravity = gravity;\n        // Durée de vie de la particule \n        this.life = life;\n        // Compteur de rafraichissement \n        this.moves = 0;\n        // Déplacement en X \n        this.xunits = Math.cos(radians) * this.speed;\n        // Déplacement en Y \n        this.yunits = Math.sin(radians) * this.speed;\n    }\n}\n"]}