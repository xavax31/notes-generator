{"version":3,"sources":["../../../../src/jx/core/sound/SoundPlayer.js"],"names":["uniqSoundID","SoundPlayer","dataObject","Object","assign","id","resourceId","loops","addEventDispatcher","_sound","_volume","_soundData","sound","src","_playing","_setSound","cancel","_removePlayingEvent","_finishedOnce","onfinished","remove","_playingOnce","onplaying","soundResource","jx","db","findOne","lang","config","undefined","_idSoundInstance","data","createjs","Sound","createInstance","_onSoundFinishedListener","on","_soundFinished","console","warn","_cleanupLastSound","addOnce","_addPlayingEvent","play","loop","volume","onplaystart","dispatch","target","_onPlayingListener","ticker","off","event","oldFinishedFunc","stop","_stopSound","_appFreezed","_freezeState","playing","paused","_paused","destroy","_currentSoundFinished","onstop","value"],"mappings":"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","file":"SoundPlayer.js","sourcesContent":["import Component from \"jx/core/comps/Component\";\nlet uniqSoundID = 0;\n/**\n* A simple sound player with only 1 track, then only 1 sound can be play at once.\n*/\nexport default class SoundPlayer extends Component {\n    constructor(dataObject) {\n        super(Object.assign({\n            id: null,\n            resourceId: null,\n            loops: 0\n        }, dataObject));\n    }\n    _create() {\n        super._create();\n        this.addEventDispatcher(\"onfinished\", \"onplaystart\", \"onstop\", \"onplaying\"); // must be onfinished rather finished\n        this._sound = null;\n        this.loops = this.dataObject.loops;\n        this._volume = 1;\n        this._soundData = {\n            id: null,\n            sound: null,\n            src: null\n        };\n        this._playing = false;\n        if (this.dataObject.id) {\n            this.id = this.dataObject.id;\n        }\n        if (this.dataObject.resourceId) {\n            this._setSound(this.dataObject.resourceId);\n        }\n    }\n    kill() {\n        // console.info(\"killing\", this)\n        this.cancel();\n        this._removePlayingEvent();\n        if (this._finishedOnce) {\n            this.onfinished.remove(this._finishedOnce);\n            this._finishedOnce = null;\n        }\n        if (this._playingOnce) {\n            this.onplaying.remove(this._playingOnce);\n            this._playingOnce = null;\n        }\n        super.kill();\n        // console.info(\"killed\", this)\n    }\n    _setSound(id) {\n        var soundResource = this.jx.db.findOne({ id: id, lang: this.jx.config.lang });\n        // console.log(soundResource, soundResource.data)\n        this._soundData.id = id;\n        if (this._soundData.id != undefined) {\n            this._idSoundInstance = \"ID\" + (++uniqSoundID);\n            //console.info(\"this._idSoundInstance\", this._idSoundInstance)\n            //createjs.Sound.registerSound(soundResource.src, this._idSoundInstance)\n            this.sound = (soundResource.data && soundResource.data.src) ? soundResource.data : (createjs.Sound.createInstance(soundResource.src));\n            this._onSoundFinishedListener = this.sound.on(\"complete\", this._soundFinished, this);\n            this._soundData.src = soundResource.src;\n        }\n        ;\n    }\n    /**\n    * change volume.\n    * @param {number} value - min: 0, max: 1\n    */\n    set volume(value) {\n        this._volume = value;\n        if (this.sound) {\n            this.sound.volume = this._volume;\n        }\n        ;\n    }\n    /** */\n    get volume() {\n        return this._volume;\n    }\n    /**\n    * Play the sound of resourceID id.\n    */\n    play({ id, onfinished = null, onplaying = null, loops = null } = {}) {\n        // console.log(\"Play Sound\", ...arguments)\n        if (!id) {\n            if (this._soundData.id) {\n                id = this._soundData.id;\n            }\n            else {\n                console.warn('SoundPlayer.play error - correct usage - SoundPlayer.play({id:\"SOUNDPLAYERID\" )');\n            }\n        }\n        //-- if same sound is already playing, we do nothing and don't restart it.\n        if (this.sound && this._playing && id == this._soundData.id) {\n            return;\n        }\n        ;\n        //-- if another sound is already playing, we cancel it first.\n        this._cleanupLastSound();\n        if (onfinished) {\n            this._finishedOnce = onfinished || (evt => { });\n            this.onfinished.addOnce(this._finishedOnce);\n        }\n        ;\n        if (onplaying) {\n            this._playingOnce = onplaying || (evt => { });\n            this.onplaying.addOnce(this._playingOnce);\n        }\n        ;\n        this._setSound(id);\n        this._addPlayingEvent();\n        this.sound.play({ loop: loops || this.loops, volume: this._volume });\n        this._playing = true;\n        this.onplaystart.dispatch({ target: this });\n    }\n    _cleanupLastSound() {\n        if (!this.sound)\n            return;\n        this.cancel();\n        if (this._finishedOnce) {\n            this.onfinished.remove(this._finishedOnce);\n            this._finishedOnce = null;\n        }\n        if (this._playingOnce) {\n            this.onplaying.remove(this._playingOnce);\n            this._playingOnce = null;\n        }\n    }\n    _addPlayingEvent() {\n        // console.log(\"addevent\")\n        this._removePlayingEvent();\n        this._onPlayingListener = this.jx.ticker.on(\"tick\", evt => {\n            /*\n            /!\\ strange hack needed: combined with ClipCJS.playOnce(), this func is called one more time after stop() call.\n\n            let player = this.jx.dj.createPlayer(....)\n            player.play();\n            this.jx.wait(5000, ()=>player.stop());\n            // all is ok\n\n\n            let player = this.jx.dj.createPlayer(....)\n            player.play();\n            clipcjs.playOnce(..., onfinished: ()=>player.stop());\n            // A supplementary call is made here.\n            */\n            if (!this._playing)\n                return;\n            /* end hack */\n            this.onplaying.dispatch({ target: this });\n        });\n    }\n    _removePlayingEvent() {\n        if (this._onPlayingListener) {\n            this.jx.ticker.off(\"tick\", this._onPlayingListener);\n            this._onPlayingListener = null;\n        }\n    }\n    _soundFinished(event) {\n        var oldFinishedFunc = this._finishedOnce;\n        this.stop();\n    }\n    /**\n    * Stop sound AND execute end actions (no onfinished dispatch).\n    */\n    stop(dataObject) {\n        if (!this._playing)\n            return;\n        this._playing = false;\n        this._stopSound();\n        this._finishedOnce = null;\n        this.onfinished.dispatch({ target: this });\n    }\n    appFreeze() {\n        if (this._appFreezed)\n            return;\n        this._appFreezed = true;\n        this._freezeState = {\n            playing: this._playing\n        };\n        if (this.sound && this._playing) {\n            this.sound.paused = true;\n        }\n        ;\n        // super.freeze();\n    }\n    appUnfreeze() {\n        if (!this._appFreezed)\n            return;\n        this._appFreezed = false;\n        // super.unfreeze();\n        if (this.sound) {\n            this.sound.paused = !this._freezeState.playing;\n        }\n        ;\n    }\n    pause() {\n        if (this._paused)\n            return;\n        this._paused = true;\n        if (this.sound != null) {\n            this.sound.paused = true;\n        }\n    }\n    resume() {\n        if (!this._paused)\n            return;\n        this._paused = false;\n        if (this.sound != null) {\n            this.sound.paused = false;\n        }\n    }\n    /**\n     * Stop sound WITHOUT execute end actions (no onfinished dispatch).\n     */\n    cancel() {\n        if (!this._playing)\n            return;\n        this._playing = false;\n        this._stopSound();\n        if (this._finishedOnce) {\n            this.onfinished.remove(this._finishedOnce);\n            this._finishedOnce = null;\n        }\n    }\n    _stopSound() {\n        if (this.sound != null) {\n            this.sound.stop();\n            if (this._onSoundFinishedListener) {\n                this.sound.off(\"complete\", this._onSoundFinishedListener);\n                this._onSoundFinishedListener = null;\n            }\n            ;\n            this._removePlayingEvent();\n            //this.sound.off();\n            // let soundInstances = createjs.Sound.activePlugin._soundInstances[this._soundData.src];\n            // soundInstances.splice(soundInstances.indexOf(this.sound), 1);\n            // createjs.Sound.activePlugin.removeSound(this._idSoundInstance)\n            // this._idSoundInstance = null;\n            this.sound.destroy();\n            this._currentSoundFinished = null;\n            this.sound = null;\n            this.onstop.dispatch({ target: this }); //? used for what\n        }\n    }\n    get playing() {\n        return this._playing;\n    }\n}\n"]}