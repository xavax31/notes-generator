{"version":3,"sources":["../../../src/jx/core/DBManager.js"],"names":["ItemShorcutsNames","DBManager","jx","resourceDB","batchLoadersInfoArray","removeResources","resourceInfo","rootPath","resourceInfos","tools","makeArrayIfSingleObject","addedResources","i","length","type","ipack","itemsID","packageID","id","resourceChildInfo","itemsType","preload","src","path","resource","push","start","undefined","end","j","str","replaceChar","string","index","numberChar","letterChar","mode","a","concat","addResources","value","data","toLowerCase","search","isMultiLang","config","langs","resourceLang","Object","assign","lang","replace","resourceOri","resourceInfoIDs","_removeResource","findOne","batchLoader","kill","prop","requirejs","undef","testObjectsEgality","debug","warn","onResourcesLoaded","filter","item","load","requests","options","loadResourcesArray","Array","request","correspond","requestMatchesNum","resourceInfoID","instanceType","RegExp","ready","reload","_onResourceLoaded","evt","batchLoadersInfo","result","resources","failed","loaded","resourcesArr","failedResources","console","loadedResources","k","log","comp","cc","resourceID","splice","resultArray","found","find","langArg","resultLang","foundObject","cascadeDataObject","dataObject","inheritedDataObjectID","inheritedDataObject","styleDB","hasOwnProperty","cascadeStyle","replaceBy","key","_lib","JSON","stringify","exception","classPath","defined","classDef","default","classesArr","success","error","ClassDef","finalClass","err","callback","getParameter","itemInfo","defaultPackage","itemClass","packagePath","idComp","idArr","split","pop","join","editor","db","classDefined","getClass","cl","classFromID","idParameter","idDataGroup","parentObj","pathArr","libRID","symbolID","libResource","lib","mc","getFromSymbol","modelID","onFinished","importClass","IO","importConfig","exportConfig","url","$","ajax","dataType","XMLHttpRequest","textStatus","errorThrown","message","Promise","resolve","pathFile","text","_callService","object","saveText","method","params","beforeSend","jqXHR","PlainObject","responseText"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,QAAIA,oBAAoB;AACpB,kBAAU,YADU;AAEpB,iBAAS,WAFW;AAGpB,iBAAS,WAHW;AAIpB,mBAAW,aAJS;AAKpB,oBAAY,cALQ;AAMpB,wBAAgB,kBANI;AAOpB,yBAAiB,mBAPG;AAQpB,eAAO,SARa;AASpB,iBAAS,WATW;AAUpB,uBAAe,iBAVK;AAWpB,iBAAS,WAXW;AAYpB,uBAAe,iBAZK;AAapB,oBAAY,cAbQ;AAcpB,qBAAa;AAdO,KAAxB;;QAsBqBC,S;AACjB,2BAAYC,EAAZ,EAAgB;AAAA;;AACZ,iBAAKA,EAAL,GAAUA,EAAV;AACA,iBAAKC,UAAL,GAAkB,EAAlB;AACA,iBAAKC,qBAAL,GAA6B,EAA7B;AACH;;;;mCACM;AACH,oBAAI,CAAC,KAAKF,EAAV,EACI;AACJ,qBAAKG,eAAL;AACA,qBAAKH,EAAL,GAAU,IAAV;AACH;;;yCAGYI,Y,EAA+B;AAAA,oBAAjBC,QAAiB,yDAAN,IAAM;;AACxC,oBAAIC,gBAAgB,KAAKN,EAAL,CAAQO,KAAR,CAAcC,uBAAd,CAAsCJ,YAAtC,CAApB;AACA,oBAAIK,iBAAiB,EAArB;;AAEA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,cAAcK,MAAlC,EAA0CD,GAA1C,EAA+C;AAC3C,wBAAIN,eAAeE,cAAcI,CAAd,CAAnB;;AAEA,wBAAIN,aAAaQ,IAAb,IAAqB,SAAzB,EAAoC;AAChC,6BAAK,IAAIC,QAAQ,CAAjB,EAAoBA,QAAQT,aAAaU,OAAb,CAAqBH,MAAjD,EAAyDE,OAAzD,EAAkE;AAC9DT,yCAAaW,SAAb,GAAyBX,aAAaW,SAAb,IAA0B,EAAnD;AACA,gCAAIC,KAAMZ,aAAaW,SAAb,KAA2B,EAA5B,GACHX,aAAaW,SAAb,GAAyB,GAAzB,GAA+BX,aAAaU,OAAb,CAAqBD,KAArB,CAD5B,GAEHT,aAAaU,OAAb,CAAqBD,KAArB,CAFN;AAGA,gCAAII,oBAAoB;AACpBL,sCAAMR,aAAac,SADC;AAEpBC,yCAASf,aAAae,OAFF;AAGpBH,oCAAIA,EAHgB;AAIpBI,qCAAKhB,aAAaiB,IAAb,GAAoB,GAApB,GAA0BjB,aAAaU,OAAb,CAAqBD,KAArB;AAJX,6BAAxB;AAMA,gCAAIS,WAAW,uBAAaL,iBAAb,CAAf;AACA,iCAAKhB,UAAL,CAAgBqB,SAASN,EAAzB,IAA+B,KAAKf,UAAL,CAAgBqB,SAASN,EAAzB,KAAgCM,QAA/D;AACAb,2CAAec,IAAf,CAAoB,KAAKtB,UAAL,CAAgBqB,SAASN,EAAzB,CAApB;AACH;AACD;AACH,qBAjBD,MAmBK,IAAIZ,aAAaQ,IAAb,IAAqB,eAArB,IAAwCR,aAAaoB,KAAb,IAAsBC,SAA9D,IAA2ErB,aAAasB,GAAb,IAAoBD,SAAnG,EAA8G;AAC/G,iCAAK,IAAIE,IAAIvB,aAAaoB,KAA1B,EAAiCG,KAAKvB,aAAasB,GAAnD,EAAwDC,GAAxD,EAA6D;AACzD,oCAAIV,oBAAoB;AACpBL,0CAAMR,aAAaQ,IADC;AAEpBO,6CAASf,aAAae,OAFF;AAGpBH,wCAAI,KAAKhB,EAAL,CAAQO,KAAR,CAAcqB,GAAd,CAAkBC,WAAlB,CAA8B,EAAEC,QAAQ1B,aAAaY,EAAvB,EAA2Be,OAAOJ,CAAlC,EAAqCK,YAAY,GAAjD,EAAsDC,YAAY,GAAlE,EAAuEC,MAAM,WAA7E,EAA0FC,GAAG,CAA7F,EAA9B,CAHgB;AAIpBf,yCAAK,KAAKpB,EAAL,CAAQO,KAAR,CAAcqB,GAAd,CAAkBC,WAAlB,CAA8B,EAAEC,QAAQ1B,aAAagB,GAAvB,EAA4BW,OAAOJ,CAAnC,EAAsCK,YAAY,GAAlD,EAAuDC,YAAY,GAAnE,EAAwEC,MAAM,WAA9E,EAA2FC,GAAG,CAA9F,EAA9B;AAJe,iCAAxB;AAQA1B,iDAAiBA,eAAe2B,MAAf,CAAsB,KAAKC,YAAL,CAAkB,CAACpB,iBAAD,CAAlB,EAAuCZ,QAAvC,CAAtB,CAAjB;AACH;AACJ,yBAZI,MAcA;AAED,oCAAID,aAAakC,KAAb,IAAsBlC,aAAamC,IAAvC,EAA6C;AACzCnC,iDAAamC,IAAb,GAAoBnC,aAAakC,KAAjC;AACH;AACD;;AAEA,oCAAIlC,aAAagB,GAAb,IAAoBf,QAAxB,EAAkC;AAE9B,wCAAID,aAAaQ,IAAb,CAAkB4B,WAAlB,MAAmC,OAAnC,IAA8CpC,aAAagB,GAAb,CAAiBqB,MAAjB,CAAwB,MAAxB,KAAmC,CAAC,CAAtF,EAAyF;AACrFrC,qDAAagB,GAAb,GAAmBf,WAAW,MAAX,GAAoBD,aAAagB,GAAjC,GAAuC,KAA1D;AACH,qCAFD,MAGK;AACDhB,qDAAagB,GAAb,GAAmBf,WAAW,GAAX,GAAiBD,aAAagB,GAAjD;AACH;AACJ;;AAED,oCAAIhB,aAAaQ,IAAb,IAAqB,OAAzB,EAAkC;AAE9B,wCAAI8B,cAAetC,aAAagB,GAAb,CAAiBqB,MAAjB,CAAwB,YAAxB,KAAyC,CAAC,CAA7D;;AAEA,yCAAK,IAAId,IAAI,CAAb,EAAgBA,IAAI,KAAK3B,EAAL,CAAQ2C,MAAR,CAAeC,KAAf,CAAqBjC,MAAzC,EAAiDgB,GAAjD,EAAsD;AAClD,4CAAIkB,eAAeC,OAAOC,MAAP,CAAc,EAAd,EAAkB3C,YAAlB,CAAnB;;AAEAyC,qDAAa7B,EAAb,GAAkB6B,aAAa7B,EAAb,GAAkB,GAAlB,GAAwB,KAAKhB,EAAL,CAAQ2C,MAAR,CAAeC,KAAf,CAAqBjB,CAArB,CAA1C;AACAkB,qDAAaG,IAAb,GAAoB,KAAKhD,EAAL,CAAQ2C,MAAR,CAAeC,KAAf,CAAqBjB,CAArB,CAApB;;AAEAkB,qDAAazB,GAAb,GAAmByB,aAAazB,GAAb,CAAiB6B,OAAjB,CAAyB,SAAzB,EAAoC,KAAKjD,EAAL,CAAQ2C,MAAR,CAAeC,KAAf,CAAqBjB,CAArB,CAApC,CAAnB;AACAkB,qDAAa1B,OAAb,GAAwB,CAACuB,WAAD,IAAiB,KAAK1C,EAAL,CAAQ2C,MAAR,CAAeK,IAAf,IAAuB,KAAKhD,EAAL,CAAQ2C,MAAR,CAAeC,KAAf,CAAqBjB,CAArB,CAAxC,GAAmEkB,aAAa1B,OAAhF,GAA0F,KAAlH;;AAEA,4CAAIG,WAAW,uBAAauB,YAAb,CAAf;AACA,6CAAK5C,UAAL,CAAgBqB,SAASN,EAAzB,IAA+B,KAAKf,UAAL,CAAgBqB,SAASN,EAAzB,KAAgCM,QAA/D;AACAb,uDAAec,IAAf,CAAoB,KAAKtB,UAAL,CAAgBqB,SAASN,EAAzB,CAApB;AACA,4CAAI,CAAC0B,WAAL,EACI;AACP;;AAEDtC,iDAAasC,WAAb,GAA2B,IAA3B;AACAtC,iDAAae,OAAb,GAAuB,KAAvB;AACA,wCAAI+B,cAAc,uBAAa9C,YAAb,CAAlB;AACA,yCAAKH,UAAL,CAAgBiD,YAAYlC,EAA5B,IAAkC,KAAKf,UAAL,CAAgBiD,YAAYlC,EAA5B,KAAmCkC,WAArE;AACAzC,mDAAec,IAAf,CAAoB,KAAKtB,UAAL,CAAgBiD,YAAYlC,EAA5B,CAApB;AACH,iCAzBD,MA0BK;AACD,wCAAIM,WAAW,uBAAalB,YAAb,CAAf;AACA,yCAAKH,UAAL,CAAgBqB,SAASN,EAAzB,IAA+B,KAAKf,UAAL,CAAgBqB,SAASN,EAAzB,KAAgCM,QAA/D;AACAb,mDAAec,IAAf,CAAoB,KAAKtB,UAAL,CAAgBqB,SAASN,EAAzB,CAApB;AACH;AACJ;AACJ;AACD,uBAAOP,cAAP;AACH;;;8CAEuC;AAAA,oBAAxB0C,eAAwB,yDAAN,IAAM;;AACpC,oBAAIA,eAAJ,EAAqB;AACjBA,sCAAkB,KAAKnD,EAAL,CAAQO,KAAR,CAAcC,uBAAd,CAAsC2C,eAAtC,CAAlB;AACA,yBAAK,IAAIzC,IAAI,CAAb,EAAgBA,IAAIyC,gBAAgBxC,MAApC,EAA4CD,GAA5C,EAAiD;AAC7C,6BAAK0C,eAAL,CAAqB,KAAKC,OAAL,CAAaF,gBAAgBzC,CAAhB,CAAb,CAArB;AACH;AACJ,iBALD,MAMK;AACD,yBAAK,IAAIA,IAAI,CAAb,EAAgBA,IAAI,KAAKR,qBAAL,CAA2BS,MAA/C,EAAuDD,GAAvD,EAA4D;AACxD,6BAAKR,qBAAL,CAA2BQ,CAA3B,EAA8B4C,WAA9B,CAA0CC,IAA1C;AACH;AACD,yBAAKrD,qBAAL,CAA2BS,MAA3B,GAAoC,CAApC;AACA,yBAAK,IAAI6C,IAAT,IAAiB,KAAKvD,UAAtB,EAAkC;AAC9B,6BAAKA,UAAL,CAAgBuD,IAAhB,EAAsBjB,IAAtB,GAA6B,IAA7B;AACA,4BAAI,KAAKtC,UAAL,CAAgBuD,IAAhB,EAAsB5C,IAAtB,IAA8B,OAAlC,EAA2C;AACvC6C,sCAAUC,KAAV,CAAgB,KAAKzD,UAAL,CAAgBuD,IAAhB,EAAsBpC,GAAtC;AACH;AACD;AACA,+BAAO,KAAKnB,UAAL,CAAgBuD,IAAhB,CAAP;AACH;AACJ;AACJ;;;4CACepD,Y,EAAc;AAC1B,qBAAK,IAAIoD,IAAT,IAAiB,KAAKvD,UAAtB,EAAkC;AAC9B,wBAAI,KAAKD,EAAL,CAAQO,KAAR,CAAcoD,kBAAd,CAAiC,CAACvD,YAAD,EAAe,KAAKH,UAAL,CAAgBuD,IAAhB,CAAf,CAAjC,CAAJ,EAA6E;AACzE,+BAAO,KAAKvD,UAAL,CAAgBuD,IAAhB,CAAP;AACA;AACH;AACD;AACH;AACD;AACA,qBAAKxD,EAAL,CAAQ4D,KAAR,CAAcC,IAAd,CAAmB,uBAAnB,EAA4CzD,aAAaY,EAAzD,EAA6D,4BAA7D;AACH;;;uCAOUZ,Y,EAAc0D,iB,EAAoC;AAAA,oBAAjBzD,QAAiB,yDAAN,IAAM;;AACzD,oBAAII,iBAAiB,KAAK4B,YAAL,CAAkBjC,YAAlB,EAAgCC,QAAhC,CAArB;AACAI,iCAAiBA,eAAesD,MAAf,CAAsB,gBAAQ;AAC3C,2BAAO,EAAEC,KAAKpD,IAAL,IAAa,OAAb,IAAwBoD,KAAKhB,IAAL,IAAavB,SAAvC,CAAP;AACH,iBAFgB,CAAjB;AAGA,qBAAKwC,IAAL,CAAUxD,cAAV,EAA0BqD,iBAA1B;AACH;;;iCAMII,Q,EAAUJ,iB,EAAiC;AAAA;;AAAA,oBAAdK,OAAc,yDAAJ,EAAI;;AAE5C,oBAAID,WAAW,KAAKlE,EAAL,CAAQO,KAAR,CAAcC,uBAAd,CAAsC0D,QAAtC,CAAf;;AAEA,oBAAIE,qBAAqB,IAAIC,KAAJ,EAAzB;AACA,oBAAIC,OAAJ;AACA,oBAAIC,UAAJ;AACA,qBAAK,IAAI7D,IAAI,CAAb,EAAgBA,IAAIwD,SAASvD,MAA7B,EAAqCD,GAArC,EAA0C;AACtC4D,8BAAUJ,SAASxD,CAAT,CAAV;;AAGA,wBAAI8D,oBAAoB,CAAxB;AACA,wBAAIpE,YAAJ;AACA,yBAAK,IAAIqE,cAAT,IAA2B,KAAKxE,UAAhC,EAA4C;AACxCG,uCAAe,KAAKH,UAAL,CAAgBwE,cAAhB,CAAf;AACAF,qCAAa,IAAb;;AAEA,6BAAK,IAAIf,IAAT,IAAiBc,OAAjB,EAA0B;AACtB,gCAAId,QAAQ,MAAR,IAAkBc,QAAQd,IAAR,KAAiBpD,aAAaoD,IAAb,CAAvC,EAA2D;AACvD,oCAAI,EAAE,KAAKxD,EAAL,CAAQO,KAAR,CAAcmE,YAAd,CAA2BtE,aAAaoD,IAAb,CAA3B,KAAkD,QAAlD,IACCpD,aAAaoD,IAAb,EAAmBf,MAAnB,CAA0B,IAAIkC,MAAJ,CAAWL,QAAQd,IAAR,CAAX,CAA1B,KAAwD,CAAC,CAD5D,CAAJ,EACoE;AAChEe,iDAAa,KAAb;AACA;AACH;AACJ;AACJ;;AAED,4BAAIA,UAAJ,EAAgB;AACZC;;AAEA,gCAAK,CAACpE,aAAawE,KAAd,IAAuBT,QAAQU,MAApC,EAA6C;AACzCT,mDAAmB7C,IAAnB,CAAwBnB,YAAxB;AACH;AACJ;AACJ;AACD;;AAGA,wBAAIoE,qBAAqB,CAArB,IAA0BF,QAAQlD,GAAtC,EAA2C;AACvC,4BAAIE,WAAW,uBAAa,EAAEN,IAAIsD,QAAQlD,GAAd,EAAmBA,KAAKkD,QAAQlD,GAAhC,EAAqCR,MAAM0D,QAAQ1D,IAAnD,EAAb,CAAf;AACAwD,2CAAmB7C,IAAnB,CAAwBD,QAAxB;AACAkD;AACH;AACD,wBAAIA,qBAAqB,CAAzB,EAA4B;AACxB,6BAAKxE,EAAL,CAAQ4D,KAAR,CAAcC,IAAd,CAAmB,uCAAnB,EAA4DS,OAA5D;AACH;AACJ;AACD;AACA,oBAAIhB,cAAc,0BAAgBc,kBAAhB,EAAoC;AAAA,2BAAO,MAAKU,iBAAL,CAAuBC,GAAvB,CAAP;AAAA,iBAApC,EAAwE,KAAK/E,EAA7E,CAAlB;AACA,qBAAKE,qBAAL,CAA2BqB,IAA3B,CAAgC,EAAE+B,aAAaA,WAAf,EAA4BQ,mBAAmBA,iBAA/C,EAAhC;AACAR,4BAAYW,IAAZ;AACH;;;8CACiBX,W,EAAa;AAC3B,qBAAK,IAAI5C,IAAI,CAAb,EAAgBA,IAAI,KAAKR,qBAAL,CAA2BS,MAA/C,EAAuDD,GAAvD,EAA4D;AACxD,wBAAIsE,mBAAmB,KAAK9E,qBAAL,CAA2BQ,CAA3B,CAAvB;AACA,wBAAIsE,iBAAiB1B,WAAjB,KAAiCA,WAArC,EAAkD;AAC9C,4BAAI2B,SAAS,EAAEC,WAAW,EAAb,EAAiBC,QAAQ,EAAzB,EAA6BC,QAAQ,EAArC,EAAyCC,cAAc,EAAvD,EAAb;;AAEA,4BAAI/B,YAAYgC,eAAZ,CAA4B3E,MAA5B,GAAqC,CAAzC,EAA4C;AACxC,iCAAK,IAAIgB,IAAI,CAAb,EAAgBA,IAAI2B,YAAYgC,eAAZ,CAA4B3E,MAAhD,EAAwDgB,GAAxD,EAA6D;AACzD,oCAAIL,WAAWgC,YAAYgC,eAAZ,CAA4B3D,CAA5B,CAAf;AACA4D,wCAAQ1B,IAAR,CAAa,kBAAb,EAAiCvC,QAAjC;AACA2D,uCAAOC,SAAP,CAAiB5D,SAASN,EAA1B,IAAgCM,QAAhC;AACA2D,uCAAOE,MAAP,CAAc5D,IAAd,CAAmBD,QAAnB;AACA2D,uCAAOI,YAAP,CAAoB9D,IAApB,CAAyBD,QAAzB;AACH;AACJ;AACD,4BAAIgC,YAAYkC,eAAZ,CAA4B7E,MAA5B,GAAqC,CAAzC,EAA4C;AACxC,iCAAK,IAAI8E,IAAI,CAAb,EAAgBA,IAAInC,YAAYkC,eAAZ,CAA4B7E,MAAhD,EAAwD8E,GAAxD,EAA6D;AACzD,oCAAInE,WAAWgC,YAAYkC,eAAZ,CAA4BC,CAA5B,CAAf;AACA,qCAAKzF,EAAL,CAAQ4D,KAAR,CAAc8B,GAAd,CAAkB,kBAAlB,EAAsCpE,QAAtC;;AAEA,oCAAIA,SAASV,IAAT,IAAiB,OAArB,EAA8B;AAC1B,yCAAKZ,EAAL,CAAQ2F,IAAR,CAAarE,SAASN,EAAtB,IAA4BM,SAASiB,IAArC;AACH,iCAFD,MAGK,IAAIjB,SAASV,IAAT,CAAc4B,WAAd,MAA+B,UAAnC,EAA+C;AAEhDlB,6CAASiB,IAAT,GAAgB,KAAKvC,EAAL,CAAQ4F,EAAR,CAAW,EAAEhF,MAAM,UAAR,EAAoBI,IAAIM,SAASN,EAAjC,EAAqC6E,YAAYvE,SAASN,EAA1D,EAAX,CAAhB;AACH;AACDiE,uCAAOC,SAAP,CAAiB5D,SAASN,EAA1B,IAAgCM,QAAhC;AACA2D,uCAAOG,MAAP,CAAc7D,IAAd,CAAmBD,QAAnB;AACA2D,uCAAOI,YAAP,CAAoB9D,IAApB,CAAyBD,QAAzB;AACH;AACJ;AACDgC,oCAAYC,IAAZ;AACA,6BAAKrD,qBAAL,CAA2B4F,MAA3B,CAAkCpF,CAAlC,EAAqC,CAArC;AACAsE,yCAAiBlB,iBAAjB,CAAmCmB,MAAnC;AACA;AACH;AACJ;AACJ;;;iCAEIX,O,EAAS;AACV,oBAAIyB,cAAc,EAAlB;AACA,oBAAIC,QAAQ,KAAZ;AACA,oBAAI,KAAKhG,EAAL,CAAQO,KAAR,CAAcmE,YAAd,CAA2BJ,OAA3B,KAAuC,OAA3C,EAAoD;AAChD,yBAAK,IAAI5D,IAAI,CAAb,EAAgBA,IAAI4D,QAAQ3D,MAA5B,EAAoCD,GAApC,EAAyC;AACrCqF,oCAAY3D,MAAZ,CAAmB,KAAK6D,IAAL,CAAU3B,QAAQ5D,CAAR,CAAV,CAAnB;AACH;AACD;AACH,iBALD,MAMK;AAWD,wBAAIwF,UAAU5B,QAAQtB,IAAtB;;AAEA,2BAAOsB,QAAQtB,IAAf;;AAGA,yBAAK,IAAI6C,UAAT,IAAuB,KAAK5F,UAA5B,EAAwC;AACpC+F,gCAAQ,IAAR;AACA,6BAAK,IAAIxC,IAAT,IAAiBc,OAAjB,EAA0B;AACtB,gCAAId,QAAQ,IAAR,IAAgBc,QAAQd,IAAR,aAAyBmB,MAA7C,EAAqD;AACjD,oCAAI,KAAK1E,UAAL,CAAgB4F,UAAhB,EAA4BrC,IAA5B,EAAkCf,MAAlC,CAAyC6B,QAAQd,IAAR,CAAzC,KAA2D,CAAC,CAAhE,EAAmE;AAC/DwC,4CAAQ,KAAR;AACA;AACH;AACD;AACH,6BAND,MAOK;AACD,oCAAI1B,QAAQd,IAAR,KAAiB,KAAKvD,UAAL,CAAgB4F,UAAhB,EAA4BrC,IAA5B,CAArB,EAAwD;AACpDwC,4CAAQ,KAAR;AACA;AACH;AACD;AACH;AACJ;AACD,4BAAIA,KAAJ,EAAW;AACP,gCAAI,KAAK/F,UAAL,CAAgB4F,UAAhB,EAA4BnD,WAAhC,EAA6C;AACzC,oCAAIwD,OAAJ,EAAa;AACT,wCAAIC,aAAa,KAAKF,IAAL,CAAU,EAAEjF,IAAI6E,aAAa,GAAb,GAAmBK,OAAzB,EAAV,CAAjB;AACA,wCAAIC,WAAWxF,MAAX,GAAoB,CAApB,IAAyBwF,WAAW,CAAX,EAAc5D,IAA3C,EAAiD;AAC7C4D,qDAAaA,WAAW,CAAX,CAAb;AACH,qCAFD,MAGK;AACDA,qDAAa,KAAKF,IAAL,CAAU,EAAEjF,IAAI6E,aAAa,GAAb,GAAmB,KAAK7F,EAAL,CAAQ2C,MAAR,CAAeC,KAAf,CAAqB,CAArB,CAAzB,EAAV,EAA8D,CAA9D,CAAb;AACH;AACJ,iCARD,MASK;AACDuD,iDAAa,KAAKF,IAAL,CAAU,EAAEjF,IAAI6E,aAAa,GAAb,GAAmB,KAAK7F,EAAL,CAAQ2C,MAAR,CAAeC,KAAf,CAAqB,CAArB,CAAzB,EAAV,EAA8D,CAA9D,CAAb;AACH;AACJ,6BAbD,MAcK;AACD,oCAAIuD,aAAa,KAAKlG,UAAL,CAAgB4F,UAAhB,CAAjB;AACH;AACDE,wCAAYxE,IAAZ,CAAiB4E,UAAjB;AACH;AACJ;AACD,wBAAIJ,YAAYpF,MAAZ,IAAsB,IAA1B,EAAgC;AAC5B,6BAAKX,EAAL,CAAQ4D,KAAR,CAAcC,IAAd,CAAmB,sCAAnB,EAA2DS,OAA3D;AACH;AACD,2BAAOyB,WAAP;AACH;AACJ;;;oCAEOzB,O,EAAS;AACb,oBAAI8B,cAAc,KAAKH,IAAL,CAAU3B,OAAV,EAAmB,CAAnB,CAAlB;;AAEA,oBAAI8B,eAAe3E,SAAf,KAA6B2E,YAAYxF,IAAZ,IAAoB,YAApB,IAAoCwF,YAAYxF,IAAZ,IAAoB,WAArF,CAAJ,EAAuG;AACnG,yBAAKyF,iBAAL,CAAuBD,YAAY7D,IAAnC;AACH;AACD,uBAAO6D,WAAP;AACH;;;mCAEM9B,O,EAAS;AACZ,oBAAI,KAAKrE,UAAL,CAAgBqE,QAAQ,IAAR,CAAhB,CAAJ,EAAoC;AAChC,2BAAO,IAAP;AACH;AACD,uBAAO,KAAP;AACH;;;8CAEiBgC,U,EAAY;AAC1B,oBAAIC,wBAAwBD,WAAW,IAAX,CAA5B;AACA,oBAAIC,qBAAJ,EAA2B;AACvB,2BAAOD,WAAW,IAAX,CAAP;AACA,wBAAIE,sBAAsB,KAAKC,OAAL,CAAaF,qBAAb,CAA1B;AACA,wBAAIC,mBAAJ,EAAyB;AACrB,6BAAK,IAAIhD,IAAT,IAAiBgD,mBAAjB,EAAsC;AAElC,gCAAIF,WAAWI,cAAX,CAA0BlD,IAA1B,CAAJ,EAAqC;AACjC;AACH;AACD8C,uCAAW9C,IAAX,IAAmBgD,oBAAoBhD,IAApB,CAAnB;AACH;AACD8C,qCAAa,KAAKK,YAAL,CAAkBL,UAAlB,CAAb;AACH,qBATD,MAUK;AACD,6BAAKtG,EAAL,CAAQ4D,KAAR,CAAcC,IAAd,CAAmB,yBAAnB,EAA8CyC,WAAW,IAAX,CAA9C;AACH;AACJ;AACD,uBAAOA,UAAP;AACH;;;kCAKK;AACF,oBAAIrB,SAAS;AACTC,+BAAW,KAAKjF;AADP,iBAAb;AAGA,yBAAS2G,SAAT,CAAmBC,GAAnB,EAAwBvE,KAAxB,EAA+B;AAC3B,wBAAIuE,OAAO,IAAX,EAAiB;AAEb,+BAAO,IAAP;AACH;AACD;AACA,wBAAIA,OAAO,MAAP,IAAiBvE,SAASb,SAA1B,IAAuCa,MAAMwE,IAAN,KAAerF,SAA1D,EAAqE;AAEjE,+BAAO,cAAP;AACH;AACD;AACA,wBAAIoF,OAAO,QAAX,EAAqB;AAEjB,+BAAO,QAAP;AACH;AACD;AACA,2BAAOvE,KAAP;AACH;AACD,oBAAI;AACA,wBAAIR,SAASiF,KAAKC,SAAL,CAAe/B,MAAf,EAAuB2B,SAAvB,EAAkC,CAAlC,CAAb;AACArB,4BAAQG,GAAR,CAAY5D,MAAZ;AACA,2BAAOiF,KAAKC,SAAL,CAAe/B,MAAf,EAAuB2B,SAAvB,EAAkC,CAAlC,CAAP;AACH,iBAJD,CAKA,OAAOK,SAAP,EAAkB;AACd1B,4BAAQ1B,IAAR,CAAa,0DAAb;AACA0B,4BAAQG,GAAR,CAAY,KAAKzF,UAAjB;AACA,2BAAO,KAAKA,UAAZ;AACH;AACJ;;;qCAQQiH,S,EAAW;AAChB,oBAAI,CAACzD,UAAU0D,OAAV,CAAkBD,SAAlB,CAAL,EACI,OAAO,IAAP;AACJ,oBAAIE,WAAW3D,UAAUyD,SAAV,CAAf;AACAE,2BAAWA,SAASC,OAAT,IAAoBD,QAA/B;AACA,uBAAOA,QAAP;AACH;;;wCAMWE,U,EAAsD;AAAA,oBAA1CC,OAA0C,yDAAhC,eAAO,CAAG,CAAsB;AAAA,oBAApBC,KAAoB,yDAAZ,eAAO,CAAG,CAAE;;AAE9D/D,0BAAU6D,UAAV,EAAsB,UAAUG,QAAV,EAAoB;AACtC,wBAAIC,aAAaD,SAASJ,OAAT,IAAoBI,QAArC;AACAF,4BAAQG,UAAR;AACH,iBAHD,EAGG,UAAUC,GAAV,EAAe;AACdH,0BAAMG,GAAN;AACH,iBALD;AAMH;;;yCAMYL,U,EAAYM,Q,EAAU;AAE/BnE,0BAAU6D,UAAV,EAAsBM,QAAtB,EAAgC,UAACD,GAAD;AAAA,2BAASC,SAAS,EAAEJ,OAAOG,GAAT,EAAT,CAAT;AAAA,iBAAhC;AACH;;;yCAMYtG,I,EAAM;AACf,uBAAOoC,UAAU0D,OAAV,CAAkB9F,IAAlB,CAAP;AACH;;;wCAEWL,E,EAAI;AACZ,uBAAO,KAAK6G,YAAL,CAAkB,EAAE7G,MAAF,EAAlB,CAAP;AACH;;;iDAEoB8G,Q,EAAiC;AAAA,oBAAvBC,cAAuB,yDAAN,IAAM;;AAClD,oBAAIC,SAAJ;AACA,oBAAI,OAAOF,SAASlH,IAAhB,IAAwB,QAA5B,EAAsC;AAGlC,wBAAIqH,cAAc,IAAlB;AACA,wBAAIC,SAAS,IAAb;AACA,wBAAIC,QAAQL,SAASlH,IAAT,CAAcwH,KAAd,CAAoB,GAApB,CAAZ;AACA,wBAAID,MAAMxH,MAAN,GAAe,CAAnB,EAAsB;AAClBuH,iCAASC,MAAMA,MAAMxH,MAAN,GAAe,CAArB,CAAT;AACAwH,8BAAME,GAAN;AACAJ,sCAAcE,MAAMG,IAAN,CAAW,GAAX,CAAd;AACH,qBAJD,MAKK;AACDJ,iCAASC,MAAM,CAAN,CAAT;AACH;AACD,wBAAI,CAACF,WAAL,EAAkB;AACdA,sCAAeH,SAASS,MAAT,IAAmB9G,SAAnB,IAAgCqG,SAASS,MAAT,CAAgB3H,IAAhB,IAAwBa,SAAzD,GAAsEqG,SAASS,MAAT,CAAgB3H,IAAtF,GAA6FmH,cAA3G;AACH;AACDG,6BAASpI,kBAAkBoI,MAAlB,KAA6BA,MAAtC;AAEA,wBAAI,KAAKlI,EAAL,CAAQwI,EAAR,CAAWC,YAAX,CAAwB,eAAeR,WAAf,GAA6B,GAA7B,GAAmCC,MAA3D,CAAJ,EAAwE;AACpEF,oCAAY,KAAKhI,EAAL,CAAQwI,EAAR,CAAWE,QAAX,CAAoB,eAAeT,WAAf,GAA6B,GAA7B,GAAmCC,MAAvD,CAAZ;AACH,qBAFD,MAGK,IAAI,KAAKlI,EAAL,CAAQwI,EAAR,CAAWnF,OAAX,CAAmB,EAAErC,IAAI8G,SAASlH,IAAf,EAAnB,CAAJ,EAA+C;AAEhDoH,oCAAY,KAAKhI,EAAL,CAAQwI,EAAR,CAAWnF,OAAX,CAAmB,EAAErC,IAAI8G,SAASlH,IAAf,EAAnB,EAA0C2B,IAAtD;AACH,qBAHI,MAIA,IAAI,KAAKvC,EAAL,CAAQwI,EAAR,CAAWC,YAAX,CAAwBR,cAAc,GAAd,GAAoBC,MAA5C,CAAJ,EAAyD;AAC1DF,oCAAY,KAAKhI,EAAL,CAAQwI,EAAR,CAAWE,QAAX,CAAoBT,cAAc,GAAd,GAAoBC,MAAxC,CAAZ;AACH;AAIJ,iBAhCD,MAiCK;AACD3C,4BAAQG,GAAR,CAAYoC,QAAZ;AACAE,gCAAYF,SAASlH,IAArB;AACH;AACD,uBAAOoH,SAAP;AACH;;;uCACUhH,E,EAAIsF,U,EAAY;AACvB,oBAAIqC,KAAK,KAAKC,WAAL,CAAiB5H,EAAjB,CAAT;AACA,uBAAO,IAAI2H,EAAJ,CAAOrC,UAAP,CAAP;AACH;;;yCACYuC,W,EAAa;AACtB,oBAAIvH,WAAW,KAAK+B,OAAL,CAAa,EAAErC,IAAI6H,WAAN,EAAb,CAAf;AACA,oBAAIvH,QAAJ,EACI,OAAOA,SAASiB,IAAhB;AACJ,uBAAO,IAAP;AACH;;;yCAEYuG,W,EAAa;AACtB,oBAAI7D,SAAS,EAAb;AACA,oBAAIC,YAAY,KAAKlF,EAAL,CAAQwI,EAAR,CAAWvC,IAAX,CAAgB,EAAEjF,IAAI,IAAI2D,MAAJ,CAAW,MAAMmE,WAAN,GAAoB,GAA/B,CAAN,EAAhB,CAAhB;AACA,oBAAIC,kBAAJ;AACA,qBAAK,IAAIrI,IAAI,CAAb,EAAgBA,IAAIwE,UAAUvE,MAA9B,EAAsCD,GAAtC,EAA2C;AACvC,wBAAIsI,UAAU9D,UAAUxE,CAAV,EAAaM,EAAb,CAAgBoH,KAAhB,CAAsB,GAAtB,CAAd;AACAW,gCAAY9D,MAAZ;AACA,yBAAK,IAAItD,IAAI,CAAb,EAAgBA,IAAIqH,QAAQrI,MAA5B,EAAoCgB,GAApC,EAAyC;AACrC,4BAAIA,IAAIqH,QAAQrI,MAAR,GAAiB,CAAzB,EAA4B;AACxBoI,sCAAUC,QAAQrH,CAAR,CAAV,IAAwBoH,UAAUC,QAAQrH,CAAR,CAAV,KAAyB,EAAjD;AACAoH,wCAAYA,UAAUC,QAAQrH,CAAR,CAAV,CAAZ;AACH,yBAHD,MAIK;AACDoH,sCAAUC,QAAQrH,CAAR,CAAV,IAAwBuD,UAAUxE,CAAV,CAAxB;AACH;AACJ;AACJ;AACD,uBAAOuE,MAAP;AACH;;;iDACoC;AAAA,oBAApBgE,MAAoB,QAApBA,MAAoB;AAAA,oBAAZC,QAAY,QAAZA,QAAY;;AACjC,oBAAIC,cAAc,KAAKnJ,EAAL,CAAQwI,EAAR,CAAWnF,OAAX,CAAmB,EAAErC,IAAIiI,MAAN,EAAnB,CAAlB;AACA,oBAAI,CAACE,WAAL,EAAkB;AACd5D,4BAAQiC,KAAR,CAAc,WAAd,EAA2ByB,MAA3B,EAAmC,WAAnC;AACA,2BAAO,IAAP;AACH;AACD;AACA,oBAAI,CAACE,YAAY5G,IAAjB,EAAuB;AACnBgD,4BAAQiC,KAAR,CAAc,WAAd,EAA2ByB,MAA3B,EAAmC,YAAnC;AACA,2BAAO,IAAP;AACH;AACD;AACA,oBAAIG,MAAMD,YAAY5G,IAAtB;AACAgD,wBAAQG,GAAR,CAAY0D,GAAZ;AACA,oBAAIC,KAAKD,IAAIE,aAAJ,CAAkBJ,QAAlB,CAAT;AACA,oBAAI,CAACG,EAAL,EAAS;AACL9D,4BAAQiC,KAAR,CAAc,cAAd,EAA8B0B,QAA9B,EAAwC,uBAAxC,EAAiED,MAAjE;AACA,2BAAO,IAAP;AACH;AACD;AACA,uBAAOI,EAAP;AACH;;;yCACYE,O,EAASC,U,EAA4B;AAAA;;AAAA,oBAAhBrF,OAAgB,yDAAN,IAAM;;AAC9C,qBAAKsF,WAAL,CAAiB,CAAC,qBAAqBF,QAAQ/G,WAAR,EAArB,GAA6C,WAA9C,CAAjB,EAA6E,UAACkH,EAAD,EAAQ;AACjF,wBAAIA,EAAJ,CAAO,OAAK1J,EAAZ,EAAgBmE,OAAhB,EAAyBwF,YAAzB,CAAsCH,UAAtC;AACH,iBAFD;AAGH;;;yCACYD,O,EAASC,U,EAAYrF,O,EAAS;AAAA;;AACvC,qBAAKsF,WAAL,CAAiB,CAAC,qBAAqBF,QAAQ/G,WAAR,EAArB,GAA6C,WAA9C,CAAjB,EAA6E,UAACkH,EAAD,EAAQ;AACjF,wBAAIA,EAAJ,CAAO,OAAK1J,EAAZ,EAAgBmE,OAAhB,EAAyByF,YAAzB,CAAsCJ,UAAtC;AACH,iBAFD;AAGH;;;qCACQK,G,EAAKjC,Q,EAAU;AACpBkC,kBAAEC,IAAF,CAAO;AACHnJ,0BAAM,KADH;AAEHiJ,yBAAKA,GAFF;AAGHG,8BAAU,MAHP;AAIHzC,6BAAS,iBAAUtC,MAAV,EAAkB;AACvB2C,iCAAS3C,MAAT;AACH,qBANE;AAOHuC,2BAAO,eAAUyC,cAAV,EAA0BC,UAA1B,EAAsCC,WAAtC,EAAmD;AACtDvC,iCAAS,EAAEJ,OAAO,IAAT,EAAe4C,SAASD,WAAxB,EAAT;AACH;AATE,iBAAP;AAWH;;;4CACeN,G,EAAK;AACjB,uBAAO,IAAIQ,OAAJ,CAAY,mBAAW;AAC1BP,sBAAEC,IAAF,CAAO;AACHnJ,8BAAM,KADH;AAEHiJ,6BAAKA,GAFF;AAGHG,kCAAU,MAHP;AAIHzC,iCAAS,iBAAUtC,MAAV,EAAkB;AACvBqF,oCAAQrF,MAAR;AACH,yBANE;AAOHuC,+BAAO,eAAUyC,cAAV,EAA0BC,UAA1B,EAAsCC,WAAtC,EAAmD;AACtDG,oCAAQ,EAAE9C,OAAO,IAAT,EAAe4C,SAASD,WAAxB,EAAR;AACH;AATE,qBAAP;AAWH,iBAZM,CAAP;AAaH;;;qCACQI,Q,EAAUC,I,EAA4B;AAAA,oBAAtB5C,QAAsB,yDAAX,YAAM,CAAG,CAAE;;AAC3C,qBAAK6C,YAAL,CAAkB,WAAlB,EAA+B;AAC3BZ,yBAAKU,QADsB;AAE3BC,0BAAMA,IAFqB,EAA/B,EAGG,YAAM;AACL5C;AACH,iBALD;AAMH;;;4CACe2C,Q,EAAUC,I,EAAM;AAAA;;AAC5B,uBAAO,IAAIH,OAAJ,CAAY,mBAAW;AAC1B,2BAAKI,YAAL,CAAkB,WAAlB,EAA+B;AAC3BZ,6BAAKU,QADsB;AAE3BC,8BAAMA,IAFqB,EAA/B,EAGG,YAAM;AACLF,gCAAQ,IAAR;AACH,qBALD;AAMH,iBAPM,CAAP;AAQH;;;qCACQC,Q,EAAUG,M,EAA8B;AAAA,oBAAtB9C,QAAsB,yDAAX,YAAM,CAAG,CAAE;;AAC7C,qBAAK+C,QAAL,CAAcJ,QAAd,EAAwBxD,KAAKC,SAAL,CAAe0D,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAxB,EAAyD9C,QAAzD;AACH;;;4CACe2C,Q,EAAUG,M,EAA8B;AAAA;;AAAA,oBAAtB9C,QAAsB,yDAAX,YAAM,CAAG,CAAE;;AACpD,uBAAO,IAAIyC,OAAJ,CAAY,mBAAW;AAC1B,2BAAKM,QAAL,CAAcJ,QAAd,EAAwBxD,KAAKC,SAAL,CAAe0D,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAxB,EAAyD;AAAA,+BAAMJ,QAAQ,IAAR,CAAN;AAAA,qBAAzD;AACH,iBAFM,CAAP;AAGH;;;+CACkBC,Q,EAAUG,M,EAA8B;AAAA,oBAAtB9C,QAAsB,yDAAX,YAAM,CAAG,CAAE;;AACvD,qBAAK+C,QAAL,CAAcJ,QAAd,EAAwBxD,KAAKC,SAAL,CAAe0D,MAAf,CAAxB,EAAgD9C,QAAhD;AACH;;;yCACYgD,M,EAAQC,M,EAAQjD,Q,EAAU;AACnCkC,kBAAEC,IAAF,CAAO;AACHnJ,0BAAM,MADH;AAEHiJ,yBAAK,cAAce,MAFhB;AAGHZ,8BAAU,MAHP;AAIHzH,0BAAM,EAAEsI,QAAQ9D,KAAKC,SAAL,CAAe6D,MAAf,CAAV,EAJH;AAKHtD,6BAAS,iBAAUtC,MAAV,EAAkB;AAEvB2C,iCAAS3C,MAAT;AACH,qBARE;AASH6F,gCAAY,oBAAUC,KAAV,EAAiBC,WAAjB,EAA8B,CAEzC,CAXE;AAYHxD,2BAAO,eAAUuD,KAAV,EAAiBb,UAAjB,EAA6BC,WAA7B,EAA0C;AAC7C5E,gCAAQiC,KAAR,CAAcuD,MAAME,YAApB;AACH;AAdE,iBAAP;AAgBH;;;;;;sBA9mBgBlL,S","file":"DBManager.js","sourcesContent":["import Resource from \"jx/core/Resource\";\nimport BatchLoader from \"jx/core/BatchLoader\";\nlet ItemShorcutsNames = {\n    \"Number\": \"NumberItem\",\n    \"Sound\": \"SoundItem\",\n    \"Image\": \"ImageItem\",\n    \"Boolean\": \"BooleanItem\",\n    \"Flashtml\": \"FlashtmlItem\",\n    \"FlashtmlPack\": \"FlashtmlPackItem\",\n    \"ImageSequence\": \"ImageSequenceItem\",\n    \"FLA\": \"FLAItem\",\n    \"Video\": \"VideoItem\",\n    \"SpriteSheet\": \"SpriteSheetItem\",\n    \"class\": \"ClassFile\",\n    \"QuizManager\": \"QuizManagerItem\",\n    \"QuizData\": \"QuizDataItem\",\n    \"QuizTheme\": \"QuizThemeItem\"\n};\n/**\n * DBManager is the only access to resources. It manages loading, and give a function 'find' to symplify search of resource.\n * @example\n * // return all resources of id MyResourceID\n * var resources = this.jx.db.find({id: \"MyResourceID\"})\n */\nexport default class DBManager {\n    constructor(jx) {\n        this.jx = jx;\n        this.resourceDB = {};\n        this.batchLoadersInfoArray = [];\n    }\n    kill() {\n        if (!this.jx)\n            return;\n        this.removeResources();\n        this.jx = null;\n    }\n    /**\n    */\n    addResources(resourceInfo, rootPath = null) {\n        var resourceInfos = this.jx.tools.makeArrayIfSingleObject(resourceInfo);\n        var addedResources = [];\n        //console.log(\"addResources\", resourceInfos);\n        for (var i = 0; i < resourceInfos.length; i++) {\n            var resourceInfo = resourceInfos[i];\n            //--- PACKAGE TYPE\n            if (resourceInfo.type == \"package\") {\n                for (var ipack = 0; ipack < resourceInfo.itemsID.length; ipack++) {\n                    resourceInfo.packageID = resourceInfo.packageID || \"\";\n                    var id = (resourceInfo.packageID !== \"\")\n                        ? resourceInfo.packageID + \".\" + resourceInfo.itemsID[ipack]\n                        : resourceInfo.itemsID[ipack];\n                    var resourceChildInfo = {\n                        type: resourceInfo.itemsType,\n                        preload: resourceInfo.preload,\n                        id: id,\n                        src: resourceInfo.path + \"/\" + resourceInfo.itemsID[ipack]\n                    };\n                    var resource = new Resource(resourceChildInfo);\n                    this.resourceDB[resource.id] = this.resourceDB[resource.id] || resource;\n                    addedResources.push(this.resourceDB[resource.id]);\n                }\n                ;\n            }\n            //--- ITERATION (multiples resources definition where # char is replaced by start and end propreties)\n            else if (resourceInfo.type != \"ImageSequence\" && resourceInfo.start != undefined && resourceInfo.end != undefined) {\n                for (var j = resourceInfo.start; j <= resourceInfo.end; j++) {\n                    var resourceChildInfo = {\n                        type: resourceInfo.type,\n                        preload: resourceInfo.preload,\n                        id: this.jx.tools.str.replaceChar({ string: resourceInfo.id, index: j, numberChar: \"#\", letterChar: \"£\", mode: \"uppercase\", a: 0 }),\n                        src: this.jx.tools.str.replaceChar({ string: resourceInfo.src, index: j, numberChar: \"#\", letterChar: \"£\", mode: \"uppercase\", a: 0 })\n                        // id: this.jx.tools.replaceCharByNumber(resourceInfo.id, j),\n                        //  src: this.jx.tools.replaceCharByNumber(resourceInfo.src, j)\n                    };\n                    addedResources = addedResources.concat(this.addResources([resourceChildInfo], rootPath));\n                }\n            }\n            //--- RESOURCE \n            else {\n                //-- hack waiting code rewriting for keep data or value.\n                if (resourceInfo.value != resourceInfo.data) {\n                    resourceInfo.data = resourceInfo.value;\n                }\n                ;\n                //-- is src, we add absolute path if provided.\n                if (resourceInfo.src && rootPath) {\n                    //-- specific to classes: if class type begin by \"src\", we get class in public/js/ dir.\n                    if (resourceInfo.type.toLowerCase() == \"class\" && resourceInfo.src.search(\"^src\") != -1) {\n                        resourceInfo.src = rootPath + \"/js/\" + resourceInfo.src + \".js\";\n                    }\n                    else {\n                        resourceInfo.src = rootPath + \"/\" + resourceInfo.src;\n                    }\n                }\n                //--- MULTILING\n                if (resourceInfo.type == \"Sound\") {\n                    // is multilang if src contains string ${lang}\n                    var isMultiLang = (resourceInfo.src.search(/\\$\\{lang\\}/) != -1);\n                    //--- create/add a new resource for each lang versions of this sounds. Needed langs versions depends of this.jx.config.langs.\n                    for (var j = 0; j < this.jx.config.langs.length; j++) {\n                        var resourceLang = Object.assign({}, resourceInfo);\n                        //--- add corresponding lang as suffix to id and as lang property.\n                        resourceLang.id = resourceLang.id + \"_\" + this.jx.config.langs[j];\n                        resourceLang.lang = this.jx.config.langs[j];\n                        //--- calculate the correct src depends of lang\n                        resourceLang.src = resourceLang.src.replace(\"${lang}\", this.jx.config.langs[j]);\n                        resourceLang.preload = (!isMultiLang || (this.jx.config.lang == this.jx.config.langs[j]) ? resourceLang.preload : false);\n                        //--- add resource\n                        var resource = new Resource(resourceLang);\n                        this.resourceDB[resource.id] = this.resourceDB[resource.id] || resource;\n                        addedResources.push(this.resourceDB[resource.id]);\n                        if (!isMultiLang)\n                            break;\n                    }\n                    // we keep a resource info with original id and isMultiLang used by later load or find() call.\n                    resourceInfo.isMultiLang = true;\n                    resourceInfo.preload = false;\n                    var resourceOri = new Resource(resourceInfo);\n                    this.resourceDB[resourceOri.id] = this.resourceDB[resourceOri.id] || resourceOri;\n                    addedResources.push(this.resourceDB[resourceOri.id]);\n                }\n                else {\n                    var resource = new Resource(resourceInfo);\n                    this.resourceDB[resource.id] = this.resourceDB[resource.id] || resource;\n                    addedResources.push(this.resourceDB[resource.id]);\n                }\n            }\n        }\n        return addedResources;\n    }\n    /**  */\n    removeResources(resourceInfoIDs = null) {\n        if (resourceInfoIDs) {\n            resourceInfoIDs = this.jx.tools.makeArrayIfSingleObject(resourceInfoIDs);\n            for (var i = 0; i < resourceInfoIDs.length; i++) {\n                this._removeResource(this.findOne(resourceInfoIDs[i]));\n            }\n        }\n        else {\n            for (var i = 0; i < this.batchLoadersInfoArray.length; i++) {\n                this.batchLoadersInfoArray[i].batchLoader.kill();\n            }\n            this.batchLoadersInfoArray.length = 0;\n            for (var prop in this.resourceDB) {\n                this.resourceDB[prop].data = null;\n                if (this.resourceDB[prop].type == \"class\") {\n                    requirejs.undef(this.resourceDB[prop].src);\n                }\n                ;\n                delete this.resourceDB[prop];\n            }\n        }\n    }\n    _removeResource(resourceInfo) {\n        for (var prop in this.resourceDB) {\n            if (this.jx.tools.testObjectsEgality([resourceInfo, this.resourceDB[prop]])) {\n                delete this.resourceDB[prop];\n                return;\n            }\n            ;\n        }\n        ;\n        this.jx.debug.warn(\"Can't remove resource\", resourceInfo.id, \"doesn't exist in DBManager\");\n    }\n    /**\n     * [addAndLoad description]\n     * @param {[type]} resourceInfo      [description]\n     * @param {[type]} onResourcesLoaded [description]\n     * @param {[type]} rootPath          [description]\n     */\n    addAndLoad(resourceInfo, onResourcesLoaded, rootPath = null) {\n        var addedResources = this.addResources(resourceInfo, rootPath);\n        addedResources = addedResources.filter(item => {\n            return !(item.type == \"Sound\" && item.lang == undefined); // remove useless doubles for sounds type created for lang management during db.addResources() operation, avoid to load resource twice.\n        });\n        this.load(addedResources, onResourcesLoaded);\n    }\n    /**\n    * @param {!(Object|Object[])} requests -\n    * @param {Function} onResourcesLoaded -\n    * @param {Object} [options] -\n    */\n    load(requests, onResourcesLoaded, options = {}) {\n        // test if one or many objects to loadif not create array\n        var requests = this.jx.tools.makeArrayIfSingleObject(requests);\n        // loop through array to find if any resources are not already loaded\n        var loadResourcesArray = new Array();\n        var request;\n        var correspond; // correspond to request\n        for (var i = 0; i < requests.length; i++) {\n            request = requests[i];\n            //console.log(\"load\", request);\n            //--- test for each resource in db, if matches exactly request.\n            var requestMatchesNum = 0; // num of resources that match the request.\n            var resourceInfo;\n            for (var resourceInfoID in this.resourceDB) {\n                resourceInfo = this.resourceDB[resourceInfoID];\n                correspond = true;\n                //--- check equality for each property. If type is string, RegExp is searched.\n                for (var prop in request) {\n                    if (prop != \"data\" && request[prop] != resourceInfo[prop]) {\n                        if (!(this.jx.tools.instanceType(resourceInfo[prop]) == \"string\"\n                            && resourceInfo[prop].search(new RegExp(request[prop])) != -1)) {\n                            correspond = false;\n                            break;\n                        }\n                    }\n                }\n                //--- if correspond \n                if (correspond) {\n                    requestMatchesNum++;\n                    // --- and not allready loaded or reload asked\n                    if ((!resourceInfo.ready || options.reload)) {\n                        loadResourcesArray.push(resourceInfo);\n                    }\n                }\n            }\n            ;\n            //--- If no requestResourcesFoundNum but request.src provided, this add the possibility to directly \n            //--- load a file without adding it to db.\n            if (requestMatchesNum == 0 && request.src) {\n                var resource = new Resource({ id: request.src, src: request.src, type: request.type });\n                loadResourcesArray.push(resource);\n                requestMatchesNum++;\n            }\n            if (requestMatchesNum == 0) {\n                this.jx.debug.warn(\"> DB: No resource found for request: \", request);\n            }\n        }\n        ;\n        var batchLoader = new BatchLoader(loadResourcesArray, evt => this._onResourceLoaded(evt), this.jx);\n        this.batchLoadersInfoArray.push({ batchLoader: batchLoader, onResourcesLoaded: onResourcesLoaded });\n        batchLoader.load();\n    }\n    _onResourceLoaded(batchLoader) {\n        for (var i = 0; i < this.batchLoadersInfoArray.length; i++) {\n            var batchLoadersInfo = this.batchLoadersInfoArray[i];\n            if (batchLoadersInfo.batchLoader === batchLoader) {\n                var result = { resources: {}, failed: [], loaded: [], resourcesArr: [] };\n                //checking if a resource failed to load\n                if (batchLoader.failedResources.length > 0) {\n                    for (var j = 0; j < batchLoader.failedResources.length; j++) {\n                        var resource = batchLoader.failedResources[j];\n                        console.warn(\"failed resource \", resource);\n                        result.resources[resource.id] = resource;\n                        result.failed.push(resource);\n                        result.resourcesArr.push(resource);\n                    }\n                }\n                if (batchLoader.loadedResources.length > 0) {\n                    for (var k = 0; k < batchLoader.loadedResources.length; k++) {\n                        var resource = batchLoader.loadedResources[k]; //console.log(resource.type)\n                        this.jx.debug.log(\"loaded resource \", resource);\n                        // alert(\"resource \" + resource.type);\n                        if (resource.type == \"class\") {\n                            this.jx.comp[resource.id] = resource.data;\n                        }\n                        else if (resource.type.toLowerCase() == \"flashtml\") {\n                            // flashtml loaded is automatically convert to FlashLib\n                            resource.data = this.jx.cc({ type: \"FlashLib\", id: resource.id, resourceID: resource.id });\n                        }\n                        result.resources[resource.id] = resource;\n                        result.loaded.push(resource);\n                        result.resourcesArr.push(resource);\n                    }\n                }\n                batchLoader.kill();\n                this.batchLoadersInfoArray.splice(i, 1);\n                batchLoadersInfo.onResourcesLoaded(result);\n                break;\n            }\n        }\n    }\n    /** */\n    find(request) {\n        var resultArray = [];\n        var found = false;\n        if (this.jx.tools.instanceType(request) == \"array\") {\n            for (var i = 0; i < request.length; i++) {\n                resultArray.concat(this.find(request[i]));\n            }\n            ;\n        }\n        else {\n            //--- manage lang. If sound not exists in active lang, try to find sound in default lang.\n            // if (request.id && request.lang) {\n            //     var resultLang = this.find({id: request.id + \"_\" + request.lang});\n            //     if (resultLang.length>0 && resultLang[0].data) {\n            //         return resultLang\n            //     }\n            //     else {\n            //         return this.find({id: request.id + \"_\" + this.jx.config.langs[0]});\n            //     }\n            // }\n            var langArg = request.lang;\n            // request = Object.assign(request, {})\n            delete request.lang;\n            //console.log(request)\n            //--- if no lang\n            for (var resourceID in this.resourceDB) {\n                found = true;\n                for (var prop in request) {\n                    if (prop == \"id\" && request[prop] instanceof RegExp) {\n                        if (this.resourceDB[resourceID][prop].search(request[prop]) == -1) {\n                            found = false;\n                            break;\n                        }\n                        ;\n                    }\n                    else {\n                        if (request[prop] != this.resourceDB[resourceID][prop]) {\n                            found = false;\n                            break;\n                        }\n                        ;\n                    }\n                }\n                if (found) {\n                    if (this.resourceDB[resourceID].isMultiLang) {\n                        if (langArg) {\n                            var resultLang = this.find({ id: resourceID + \"_\" + langArg });\n                            if (resultLang.length > 0 && resultLang[0].data) {\n                                resultLang = resultLang[0];\n                            }\n                            else {\n                                resultLang = this.find({ id: resourceID + \"_\" + this.jx.config.langs[0] })[0];\n                            }\n                        }\n                        else {\n                            resultLang = this.find({ id: resourceID + \"_\" + this.jx.config.langs[0] })[0];\n                        }\n                    }\n                    else {\n                        var resultLang = this.resourceDB[resourceID];\n                    }\n                    resultArray.push(resultLang);\n                }\n            }\n            if (resultArray.length == null) {\n                this.jx.debug.warn(\"No resources found on DBManager for \", request);\n            }\n            return resultArray;\n        }\n    }\n    /** */\n    findOne(request) {\n        var foundObject = this.find(request)[0];\n        //--- for -> heritage\n        if (foundObject != undefined && (foundObject.type == \"DataObject\" || foundObject.type == \"TextStyle\")) {\n            this.cascadeDataObject(foundObject.data);\n        }\n        return foundObject;\n    }\n    /** */\n    exists(request) {\n        if (this.resourceDB[request[\"id\"]]) {\n            return true;\n        }\n        return false;\n    }\n    /** not been used yet but should be good */\n    cascadeDataObject(dataObject) {\n        var inheritedDataObjectID = dataObject[\"->\"];\n        if (inheritedDataObjectID) {\n            delete dataObject[\"->\"];\n            var inheritedDataObject = this.styleDB[inheritedDataObjectID];\n            if (inheritedDataObject) {\n                for (var prop in inheritedDataObject) {\n                    // console.log(prop,style[prop], inheritedDataObject[prop] );\n                    if (dataObject.hasOwnProperty(prop)) {\n                        continue;\n                    }\n                    dataObject[prop] = inheritedDataObject[prop];\n                }\n                dataObject = this.cascadeStyle(dataObject);\n            }\n            else {\n                this.jx.debug.warn(\"Failed to inherit Style\", dataObject[\"->\"]);\n            }\n        }\n        return dataObject;\n    }\n    /**\n     * log all resources infos in console.\n     * @return {[type]} [description]\n     */\n    log() {\n        var result = {\n            resources: this.resourceDB\n        };\n        function replaceBy(key, value) {\n            if (key == \"jx\") {\n                //console.log(\"jx\")\n                return \"jx\";\n            }\n            ;\n            if (key == \"data\" && value != undefined && value._lib !== undefined) {\n                // console.log(\"flashlibData\")\n                return \"flashlibData\";\n            }\n            ;\n            if (key == \"parent\") {\n                //console.log(\"parent\")\n                return \"parent\";\n            }\n            ;\n            return value;\n        }\n        try {\n            let string = JSON.stringify(result, replaceBy, 4);\n            console.log(string);\n            return JSON.stringify(result, replaceBy, 4);\n        }\n        catch (exception) {\n            console.warn(\"DBManager.log json cannot be constructed from resourceDB\");\n            console.log(this.resourceDB);\n            return this.resourceDB;\n        }\n    }\n    //_________________________________\n    // OTHERS\n    /**\n     * Get an already loaded Class.\n     * @param  {string} classPath\n     * @return {class}\n     */\n    getClass(classPath) {\n        if (!requirejs.defined(classPath))\n            return null;\n        var classDef = requirejs(classPath);\n        classDef = classDef.default || classDef;\n        return classDef;\n    }\n    /**\n     * Load and get an array of classes.\n     * @param  {array}   classesArr\n     * @param  {Function} callback  function(classDef)\n     */\n    importClass(classesArr, success = evt => { }, error = evt => { }) {\n        //console.log(\"importClass\", classesArr);\n        requirejs(classesArr, function (ClassDef) {\n            var finalClass = ClassDef.default || ClassDef;\n            success(finalClass);\n        }, function (err) {\n            error(err);\n        });\n    }\n    /**\n     * Load a js file.\n     * @param  {array}   js pathes array\n     * @param  {Function} callback   function()\n     */\n    importJSFile(classesArr, callback) {\n        //console.log(\"importJSFile\", classesArr);\n        requirejs(classesArr, callback, (err) => callback({ error: err }));\n    }\n    /**\n     * Return true if class exists in RAM.\n     * @param  {string} path\n     * @return {boolean}\n     */\n    classDefined(path) {\n        return requirejs.defined(path);\n    }\n    /** */\n    classFromID(id) {\n        return this.getParameter({ id });\n    }\n    /**  */\n    getClassFromItemData(itemInfo, defaultPackage = null) {\n        var itemClass;\n        if (typeof itemInfo.type == \"string\") {\n            //-- get package path of item type and id of compType \n            // ex: \"editionitems.Text\": packagePath=\"editionitems\", idComp=\"Text\"\n            var packagePath = null;\n            var idComp = null;\n            var idArr = itemInfo.type.split(\".\");\n            if (idArr.length > 1) {\n                idComp = idArr[idArr.length - 1];\n                idArr.pop();\n                packagePath = idArr.join(\"/\");\n            }\n            else {\n                idComp = idArr[0];\n            }\n            if (!packagePath) { // ? is itemInfo always used?\n                packagePath = (itemInfo.editor != undefined && itemInfo.editor.type != undefined) ? itemInfo.editor.type : defaultPackage;\n            }\n            idComp = ItemShorcutsNames[idComp] || idComp; // converts if shortcut id\n            // console.log(packagePath, idComp)\n            if (this.jx.db.classDefined(\"jx/editor/\" + packagePath + \"/\" + idComp)) {\n                itemClass = this.jx.db.getClass(\"jx/editor/\" + packagePath + \"/\" + idComp);\n            }\n            else if (this.jx.db.findOne({ id: itemInfo.type })) {\n                // console.log(this.jx.db.findOne({id: itemInfo.type}));\n                itemClass = this.jx.db.findOne({ id: itemInfo.type }).data;\n            }\n            else if (this.jx.db.classDefined(packagePath + \"/\" + idComp)) {\n                itemClass = this.jx.db.getClass(packagePath + \"/\" + idComp);\n            }\n            // else if (this.jx.db.classDefined(\"jx/editor/\"+this.defaultPackage+\"/\"+idComp)) {\n            //     itemClass = this.jx.db.getClass(\"jx/editor/\"+this.defaultPackage+\"/\"+idComp) ;\n            // }\n        }\n        else { // itemInfo.type is already a class\n            console.log(itemInfo);\n            itemClass = itemInfo.type;\n        }\n        return itemClass;\n    }\n    createComp(id, dataObject) {\n        var cl = this.classFromID(id);\n        return new cl(dataObject);\n    }\n    getParameter(idParameter) {\n        let resource = this.findOne({ id: idParameter });\n        if (resource)\n            return resource.data;\n        return null;\n    }\n    /** Get DataGroup resource and convert it to a more convenient object*/\n    getDataGroup(idDataGroup) {\n        let result = {};\n        let resources = this.jx.db.find({ id: new RegExp(\"^\" + idDataGroup + \".\") });\n        let parentObj;\n        for (var i = 0; i < resources.length; i++) {\n            let pathArr = resources[i].id.split(\".\");\n            parentObj = result;\n            for (var j = 0; j < pathArr.length; j++) {\n                if (j < pathArr.length - 1) {\n                    parentObj[pathArr[j]] = parentObj[pathArr[j]] || {};\n                    parentObj = parentObj[pathArr[j]];\n                }\n                else {\n                    parentObj[pathArr[j]] = resources[i];\n                }\n            }\n        }\n        return result;\n    }\n    getFlashSymbol({ libRID, symbolID }) {\n        let libResource = this.jx.db.findOne({ id: libRID });\n        if (!libResource) {\n            console.error(\"FlashLib \", libRID, \"not found\");\n            return null;\n        }\n        ;\n        if (!libResource.data) {\n            console.error(\"FlashLib \", libRID, \"not loaded\");\n            return null;\n        }\n        ;\n        let lib = libResource.data;\n        console.log(lib);\n        let mc = lib.getFromSymbol(symbolID);\n        if (!mc) {\n            console.error(\"Flash symbol\", symbolID, \"not found in FlashLib\", libRID);\n            return null;\n        }\n        ;\n        return mc;\n    }\n    importConfig(modelID, onFinished, options = null) {\n        this.importClass([\"jx/projecttypes/\" + modelID.toLowerCase() + \"/Importer\"], (IO) => {\n            new IO(this.jx, options).importConfig(onFinished);\n        });\n    }\n    exportConfig(modelID, onFinished, options) {\n        this.importClass([\"jx/projecttypes/\" + modelID.toLowerCase() + \"/Exporter\"], (IO) => {\n            new IO(this.jx, options).exportConfig(onFinished);\n        });\n    }\n    loadText(url, callback) {\n        $.ajax({\n            type: \"GET\",\n            url: url,\n            dataType: \"text\",\n            success: function (result) {\n                callback(result);\n            },\n            error: function (XMLHttpRequest, textStatus, errorThrown) {\n                callback({ error: true, message: errorThrown });\n            }\n        });\n    }\n    loadTextPromise(url) {\n        return new Promise(resolve => {\n            $.ajax({\n                type: \"GET\",\n                url: url,\n                dataType: \"text\",\n                success: function (result) {\n                    resolve(result);\n                },\n                error: function (XMLHttpRequest, textStatus, errorThrown) {\n                    resolve({ error: true, message: errorThrown });\n                }\n            });\n        });\n    }\n    saveText(pathFile, text, callback = () => { }) {\n        this._callService(\"writefile\", {\n            url: pathFile,\n            text: text, // args to have indentation\n        }, () => {\n            callback();\n        });\n    }\n    saveTextPromise(pathFile, text) {\n        return new Promise(resolve => {\n            this._callService(\"writefile\", {\n                url: pathFile,\n                text: text, // args to have indentation\n            }, () => {\n                resolve(true);\n            });\n        });\n    }\n    saveJSON(pathFile, object, callback = () => { }) {\n        this.saveText(pathFile, JSON.stringify(object, null, 4), callback);\n    }\n    saveJSONPromise(pathFile, object, callback = () => { }) {\n        return new Promise(resolve => {\n            this.saveText(pathFile, JSON.stringify(object, null, 4), () => resolve(true));\n        });\n    }\n    saveJSONCompressed(pathFile, object, callback = () => { }) {\n        this.saveText(pathFile, JSON.stringify(object), callback);\n    }\n    _callService(method, params, callback) {\n        $.ajax({\n            type: \"POST\",\n            url: \"services/\" + method,\n            dataType: \"json\",\n            data: { params: JSON.stringify(params) },\n            success: function (result) {\n                //console.log(\"RESULT\", result)\n                callback(result);\n            },\n            beforeSend: function (jqXHR, PlainObject) {\n                //console.log(jqXHR, PlainObject)\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                console.error(jqXHR.responseText);\n            }\n        });\n    }\n}\n"]}