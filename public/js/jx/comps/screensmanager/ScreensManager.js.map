{"version":3,"sources":["../../../../src/jx/comps/screensmanager/ScreensManager.js"],"names":["ScreensManager","dataObject","Object","assign","defaultTransition","forceFirstVideoAutoPlay","_history","History","stage","transitions","FadeBlackInOut","fadeValue","color","alpha","none","screens","currentScreen","transitionScreen","cc","type","render","visible","addChild","view","prop","css","width","height","screen","isJXComponent","id","screenID","_screenMarkedToDestroy","kill","idScreens","item","itemsToInit","i","arguments","length","ready","initialise","push","itemsInitialising","slice","oninit","splice","indexOf","evt","target","fx","data","console","log","update","search","command","replace","previous","next","warn","newScreen","fade","_defaultTransition","jx","loadingScreen","show","wait","hide","go","playIntroFirst","playIntroScreen","add","startbtnInfos","config","app","startButton","heightPercent","startButtonHeightPercent","autoplay","system","video","needUserActionToWork","showScreen","_killScreen","startScreen","needUserClickToStart","fadeTo","reset","value","_locator","_log"],"mappings":"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","file":"ScreensManager.js","sourcesContent":["import Component from \"jx/core/comps/Component\";\n/**\n */\nexport default class ScreensManager extends Component {\n    constructor(dataObject) {\n        super(Object.assign({\n            defaultTransition: \"none\",\n            forceFirstVideoAutoPlay: false\n        }, dataObject));\n    }\n    _create() {\n        super._create();\n        this._history = new History();\n        this.stage = this.dataObject.stage;\n        this.transitions = {\n            FadeBlackInOut: {\n                fadeValue: 400,\n                color: \"#000000\",\n                alpha: 1\n            },\n            none: {\n                fadeValue: 1000,\n                color: \"#000000\",\n                alpha: 0\n            }\n        };\n        this.defaultTransition = this.dataObject.defaultTransition;\n        this.forceFirstVideoAutoPlay = this.dataObject.forceFirstVideoAutoPlay;\n        this.screens = {};\n        this.currentScreen = null;\n        // TRANSITION SCREEN FADE FOR SCREENS\n        this.transitionScreen = this.cc({ type: \"Container\", render: \"DOM\" });\n        this.transitionScreen.visible = false;\n        this.stage.addChild(this.transitionScreen);\n        this.transitionScreen.view.prop(\"id\", \"transitionscreen\"); // todo: should not use view\n        this.transitionScreen.view.css(\"width\", this.stage.width + 1);\n        this.transitionScreen.view.css(\"height\", this.stage.height + 1); // TODO: ? hack: +1 pixel, sinon la derniere ligne d'1 pixel de l'ecran à masquer est visible et provoque un liseré (chrome mac). Pourtant les dimension du canvas et du div transition sont identiques.\n        this.transitionScreen.view.css(\"background-color\", this.defaultTransition.color);\n        this.transitionScreen.view.css(\"z-index\", \"300\");\n        this.transitionScreen.alpha = this.defaultTransition.alpha;\n    }\n    /**\n     * Add a screen IScreen.\n     * @param {Object|IScreen} screen\n     */\n    add(screen) {\n        screen = (screen.isJXComponent) ? screen : this.cc(screen);\n        this.screens[screen.id] = screen;\n    }\n    /**\n     * Return Screen of id screenID.\n     * @param  {String} screenID\n     * @return {IScreen}\n     */\n    give(screenID) {\n        return this.screens[screenID];\n    }\n    /**\n     * Kill screen of id screenID.\n     * @param  {String} screenID\n     */\n    killScreen(screenID) {\n        if (this.screens[screenID]) {\n            if (this.currentScreen === this.screens[screenID]) {\n                this.screens[screenID]._screenMarkedToDestroy = true;\n            }\n            ;\n        }\n    }\n    _killScreen(screenID) {\n        this.screens[screenID].kill();\n        delete this.screens[screenID];\n    }\n    /**\n     * initialise screens.\n     * @experimental\n     * @param  {...String} idScreens Array containing IDs of screens to prepare.\n     */\n    prepare(...idScreens) {\n        var item;\n        var itemsToInit = [];\n        for (var i = 0; i < arguments.length; i++) {\n            item = this.screens[arguments[i]];\n            if (!item.ready && item.initialise) {\n                itemsToInit.push(item);\n            }\n            ;\n        }\n        ;\n        var itemsInitialising = itemsToInit.slice();\n        var oninit = evt => {\n            //console.log(evt,itemsToInit,  itemsToInit.indexOf(evt.target))\n            itemsInitialising.splice(itemsInitialising.indexOf(evt.target), 1);\n            //console.log(itemsInitialising)\n            //if (itemsInitialising.length == 0) {callback({target:this})};\n        };\n        if (itemsToInit.length == 0) {\n            //callback({target:this});\n            return;\n        }\n        for (var i = 0; i < itemsToInit.length; i++) {\n            itemsToInit[i].initialise(oninit);\n        }\n    }\n    /**\n     * Show and activate screen of id screenID, replacing current screen if exists.\n     *\n     * ScreenManager keep an history of viewed screens.\n     * The commands $previous (go to previous screen in history) or $next (go to next screen in history)\n     * can be used as screenID argument.\n     * @param  {String} screenID\n     * @param  {Number} options.fx   obsolete don't use.\n     * @param  {Object} options.data Data to provide to target Screen.\n     */\n    go(screenID, { fx = null, data = {} } = {}) {\n        console.log(\"GO\");\n        this.transitionScreen.alpha = 0.0;\n        this.transitionScreen.visible = true;\n        this.transitionScreen.view.css(\"z-index\", 300);\n        this.stage.update();\n        if (screenID.search(/^\\$/) != -1) {\n            let command = screenID.replace(\"$\", \"\");\n            switch (command) {\n                case \"previous\":\n                    screenID = this._history.previous();\n                    break;\n                case \"next\":\n                    screenID = this._history.next();\n                    break;\n            }\n            if (screenID == null) {\n                console.warn(\"No more screens for requested location in history\");\n                return;\n            }\n            ;\n        }\n        var newScreen = this.screens[screenID];\n        var fade = fx != null ? fx : this._defaultTransition.fadeValue;\n        if (!newScreen.ready) {\n            this.jx.loadingScreen.show();\n            this.jx.wait(0, evt => {\n                console.log(\"initialise screen\", newScreen);\n                newScreen.initialise(evt => {\n                    this.jx.loadingScreen.hide();\n                    this.go(screenID, { fx, data });\n                });\n            });\n            return;\n        }\n        ;\n        if (newScreen.playIntroFirst) {\n            newScreen.playIntroScreen(data);\n            return;\n        }\n        this._history.add(screenID);\n        let startbtnInfos = {\n            show: this.jx.config.app.startButton,\n            heightPercent: (this.jx.config.app.startButtonHeightPercent) + \"%\"\n        };\n        if (this._history.length === 1) {\n            // if (newScreen.type == \"video\" && this._history.length === 1 ) {\n            if (startbtnInfos.show == \"no\") {\n                data.autoplay = true;\n            }\n            else if (startbtnInfos.show == \"yes\") {\n                data.autoplay = false;\n            }\n            else {\n                data.autoplay = this.forceFirstVideoAutoPlay || !this.jx.config.system.video.needUserActionToWork;\n            }\n        }\n        if (fade === 0) {\n            this.jx.loadingScreen.show();\n            this.transitionScreen.view.css(\"z-index\", 300);\n            newScreen.show(evt => {\n                this.jx.loadingScreen.hide();\n                if (newScreen.showScreen)\n                    newScreen.showScreen();\n                if (this.currentScreen) {\n                    if (this.currentScreen._screenMarkedToDestroy) {\n                        this._killScreen(this.currentScreen.id);\n                    }\n                    else {\n                        this.currentScreen.hide();\n                    }\n                }\n                ;\n                this.currentScreen = newScreen;\n                this.transitionScreen.visible = false;\n                if (newScreen.startScreen)\n                    newScreen.startScreen();\n            }, data);\n        }\n        else {\n            // console.log(\"scm fade > 0\");\n            if (newScreen.needUserClickToStart && this.jx.config.system.video.needUserActionToWork) {\n                console.log(\"scm newScreen.needUserClickToStart && this.jx.config.system.video.needUserActionToWork\", newScreen.needUserClickToStart && this.jx.config.system.video.needUserActionToWork);\n                //--- if needUserClickToStart (ex: contains videos), we need immediately call screen.show() without waiting end of fadeIn transition.\n                // this.jx.loadingScreen.show();\n                this.transitionScreen.view.css(\"z-index\", 300);\n                this.transitionScreen.view.fadeTo(fade, this.defaultTransition.alpha, (evt) => {\n                });\n                console.log(\"SHOW SCREEN\");\n                newScreen.show(evt => {\n                    this.jx.loadingScreen.hide();\n                    if (newScreen.showScreen)\n                        newScreen.showScreen();\n                    if (this.currentScreen && this.currentScreen !== newScreen) {\n                        if (this.currentScreen._screenMarkedToDestroy) {\n                            this._killScreen(this.currentScreen.id);\n                        }\n                        else {\n                            this.currentScreen.hide();\n                        }\n                    }\n                    ;\n                    this.currentScreen = newScreen;\n                    //this.transitionScreen.visible = false;\n                    this.transitionScreen.view.fadeTo(fade, 0, (evt) => {\n                        this.transitionScreen.visible = false;\n                        if (newScreen.startScreen)\n                            newScreen.startScreen();\n                    });\n                }, data);\n            }\n            else {\n                // console.log(\"scm all others\");\n                // if (this.currentScreen) {\n                // \tthis.currentScreen.hide();\n                // };\n                //this.transitionScreen.alpha = this.defaultTransition.alpha;\n                this.transitionScreen.view.css(\"z-index\", 300);\n                this.transitionScreen.view.fadeTo(fade, this.defaultTransition.alpha, (evt) => {\n                    newScreen.show(evt => {\n                        if (newScreen.showScreen)\n                            newScreen.showScreen();\n                        if (this.currentScreen && this.currentScreen !== newScreen) {\n                            if (this.currentScreen._screenMarkedToDestroy) {\n                                this._killScreen(this.currentScreen.id);\n                            }\n                            else {\n                                this.currentScreen.hide();\n                            }\n                        }\n                        ;\n                        //this.stage.update();\n                        this.currentScreen = newScreen;\n                        this.transitionScreen.view.fadeTo(fade, 0, (evt) => {\n                            this.transitionScreen.visible = false;\n                            if (newScreen.startScreen)\n                                newScreen.startScreen();\n                        });\n                    }, data);\n                });\n            }\n        }\n    }\n    /**\n     * Hide all Screens\n     */\n    hideScreens() {\n        for (var prop in this.screens) {\n            this.screens[prop].hide();\n        }\n    }\n    /**\n     * Call the reset method of all screens if exists.\n     *\n     * Not more used, because now reset Application is made by reload html page.\n     * @param  {...String} screenID\n     */\n    reset(...screenID) {\n        if (screenID.length == 0) {\n            for (var prop in this.screens) {\n                this.screens[prop].reset();\n            }\n        }\n        else {\n            for (var i = 0; i < screenID.length; i++) {\n                screenID[i].reset();\n            }\n        }\n    }\n    /**\n     * Set the default transition type used when go to new screen.\n     *\n     * Availables transitions are:\n     * - none : no transition. For prevent dbclick and zaps, interactivity is blocked about 1 seconde during transition.\n     * - FadeBlackInOut: fade to black follow by fade to new screen (delay fixed internally at 400ms);\n     * @param  {String} value \"none\", \"FadeBlackInOut\"\n     */\n    set defaultTransition(value) {\n        this._defaultTransition = this.transitions[value];\n    }\n    /**\n     * @return {String}\n     */\n    get defaultTransition() {\n        return this._defaultTransition;\n    }\n}\nclass History {\n    constructor() {\n        this._locator = -1;\n        this._log = [];\n    }\n    get length() {\n        return this._log.length;\n    }\n    add(screenID) {\n        this._log.push(screenID);\n        this._locator++;\n    }\n    previous() {\n        if (this._locator <= 0) {\n            return null;\n        }\n        ;\n        this._locator--;\n        return this._log[this._locator];\n    }\n    next() {\n        if (this._locator > this._log.length - 1) {\n            return null;\n        }\n        ;\n        this._locator++;\n        return this._log[this._locator];\n    }\n}\n"]}