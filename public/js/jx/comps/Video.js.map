{"version":3,"sources":["../../../src/jx/comps/Video.js"],"names":["Video","dataObject","extendsFrom","onfinished","onplaying","callback","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyBqBA,K;;;AAIjB,mBAAYC,UAAZ,EAAwB;AAAA;;AAAA,gHACdA,UADc;;AAEpB,YAAKC,WAAL,CAAiB,OAAjB;;AAKA,YAAKC,UAAL,GAAkB,IAAlB;;AAKA,YAAKC,SAAL,GAAiB,IAAjB;AAZoB;AAavB;;;;6BAoBM,CAAG;;;kCAKiB;AAAA,iCAAnBC,QAAmB;AAAA,YAAnBA,QAAmB,iCAAR,IAAQ;AAAG;;;6BAKU;AAAA,0EAApB,EAAEA,UAAU,IAAZ,EAAoB;;AAAA,YAAjCA,QAAiC,SAAjCA,QAAiC;AAAG;;;0BAzB5B;AAAE,eAAO,CAAP;AAAW;;;wBAKZC,K,EAAO,CAAG,C;0BAKR;AAAE,eAAO,CAAP;AAAW;;;wBAsBdA,K,EAAO,CAAG;;;wBAKhBA,K,EAAO,CAAG,C;0BAKR;AAAE,eAAO,CAAP;AAAW;;;wBAKhBA,K,EAAO,CAAG,C;0BAKR;AAAE,eAAO,KAAP;AAAe;;;;;;oBA1EZN,K","file":"Video.js","sourcesContent":["import VisualComponent from \"jx/core/comps/VisualComponent\";\n/**\n * Video player.\n * @example\n *\n * // json\n * {\n *     \"id\": \"VIDEO_01\",\n *     \"type\": \"Video\",\n *     \"description\": \"\",\n *     \"asset\": {\n *         \"preload\": true,\n *         \"src\": \"videos/video_01/VIDEO_01.mp4\"\n *     }\n * }\n *\n * // code\n * this.video = this.cc({rid:\"VIDEO_01\",\n *     oninitialised: evt=>{\n *         evt.target.play();\n *         //...\n *     }\n * });\n * this.stage.addChild(this.video);\n */\nexport default class Video extends VisualComponent {\n    /**\n     * @param  {object} dataObject\n     */\n    constructor(dataObject) {\n        super(dataObject);\n        this.extendsFrom(\"Video\");\n        /**\n         * Called when video reaches end.\n         * @type {Event}\n         */\n        this.onfinished = null;\n        /**\n         * Called during video playing.\n         * @type {Event}\n         */\n        this.onplaying = null;\n    }\n    /**\n     * Duration of video in seconds.\n     * @type {number}\n     */\n    get duration() { return 0; }\n    /**\n     * Set position in seconds\n     * @type {number}\n     */\n    set currentTime(value) { }\n    /**\n     * Get position in seconds.\n     * @type {number}\n     */\n    get currentTime() { return 0; }\n    /**\n     * Play video.\n     * Use onfinished to detect end, and onplaying to call actions during playing.\n     */\n    play() { }\n    /**\n     * Pause the video\n     * @param  {Function} options.callback  called when video really paused (after fadeout)\n     */\n    pause({ callback = null }) { }\n    /**\n     * Pause the video and reset cursor to beginning.\n     * @param  {Function} options.callback  called when video really stopped (after fadeout)\n     */\n    stop({ callback } = { callback: null }) { }\n    /**\n     * The playbackRate property sets or returns the current playback speed of the audio/video.\n     * @param  {Number} value\n     * @example\n     * video.playbackRate = 0.5; // divides speed by 2.\n     */\n    set playbackRate(value) { }\n    /**\n     * Set audio volume of video.\n     * @param  {Number} value (0-1)\n     */\n    set volume(value) { }\n    /**\n     * Get audio volume.\n     * @return {Number} (0-1)\n     */\n    get volume() { return 0; }\n    /**\n     * Mute audio.\n     * @param  {Number} value (0-1)\n     */\n    set muted(value) { }\n    /**\n     * Get if audio is muted.\n     * @return {Number} (0-1)\n     */\n    get muted() { return false; }\n}\n"]}