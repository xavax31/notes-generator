{"version":3,"sources":["../../../src/jx/comps/Text.js"],"names":["Text","dataObject","Object","assign","text","style","extendsFrom","value","view","styleObject"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA6BqBA,I;;;AAMjB,sBAAYC,UAAZ,EAAwB;AAAA;;AAAA,oHACdC,OAAOC,MAAP,CAAc;AAChBC,sBAAM,EADU;AAEhBC,uBAAO;AAFS,aAAd,EAGHJ,UAHG,CADc;;AAKpB,kBAAKK,WAAL,CAAiB,MAAjB;AALoB;AAMvB;;;;8BAEQC,K,EAAO;AACZ,qBAAKC,IAAL,CAAUJ,IAAV,GAAiBG,KAAjB;AACH,a;gCAEU;AACP,uBAAO,KAAKC,IAAL,CAAUJ,IAAjB;AACH;;;8BAUSK,W,EAAa;AACnB,qBAAKD,IAAL,CAAUH,KAAV,GAAkBI,WAAlB;AACH;;;;;;sBAhCgBT,I","file":"Text.js","sourcesContent":["import VisualComponent from \"jx/core/comps/VisualComponent\";\n/**\n * Implements a simple Text.\n * WARNING : The component must be added to display list for get the corrects width and height, else 0 is returned.\n * @example\n *\n * // json\n * {\n * \t    \"id\": \"TextID\",\n * \t    \"type\": \"Text\",\n * \t    \"value\": \"\"\n * },\n * {\n *      \"id\": \"StyleID\",\n *      \"type\": \"TextStyle\",\n *      \"value\": {\n *          \"fontFamily\": \"Harimau\",\n *          \"color\": \"#000000\",\n *          \"bold\": false,\n *          \"italic\": false,\n *          \"fontSize\": 30,\n *          \"textAlign\": \"left\",\n *          \"overflow\": \"auto\"\n *      }\n *  }\n *\n * // code\n * var myText = this.jx.cc({rid: \"TextID\", style: \"StyleID\"});\n */\nexport default class Text extends VisualComponent {\n    /**\n    * @param {object} dataObject\n    * @param {string} [dataObject.text] - text to set.\n    * @param {object|string} [dataObject.style] - style to set, Can be object or TextStyle resource ID.\n    */\n    constructor(dataObject) {\n        super(Object.assign({\n            text: \"\",\n            style: null\n        }, dataObject));\n        this.extendsFrom(\"Text\");\n    }\n    /** @type {string} */\n    set text(value) {\n        this.view.text = value;\n    }\n    /** @type {string} */\n    get text() {\n        return this.view.text;\n    }\n    /**\n     * Change style properties, cf {@link  TextStyle} for all possible properties.\n     * Only properties defined in styleObject are change in style.\n     *\n     * @example\n     * myText.style = {fontSize: 12, color: \"#FFFF00\"};\n     *\n     * @type {object|string} styleObject - Object or resource ID.\n     */\n    set style(styleObject) {\n        this.view.style = styleObject;\n    }\n}\n"]}