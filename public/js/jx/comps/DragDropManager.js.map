{"version":3,"sources":["../../../src/jx/comps/DragDropManager.js"],"names":["DragDropManager","dataObject"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAyCqBA,e;;;AAIjB,iCAAYC,UAAZ,EAAwB;AAAA;;AAAA,qIACdA,UADc;AAEvB;;;;;sBANgBD,e","file":"DragDropManager.js","sourcesContent":["import Component from \"jx/core/comps/Component\";\n/**\n * Manage a simple drag drop situation.\n *\n * @example\n *\n * // json\n * {\n * \t    \"id\": \"MyDragDrop\",\n * \t    \"type\": \"DragDropManager\"\n * },\n *\n * // code\n * var myDragDrop = this.jx.cc({rid: \"MyDragDrop\",\n * \t\tclickSound: \"sounds/dd_click.mp3\",\n *   \tzoneOverSound: \"sounds/dd_zoneover.mp3\",\n *    \tzoneDropSound: \"sounds/dd_zonedrop.mp3\",\n * \t\tonclick: evt=>{\n * \t\t},\n * \t\tondragging: evt=>{\n * \t\t\t// send repeatively during drag.\n * \t\t},\n * \t\tondragstop: evt=>{\n * \t\t},\n * \t\tonzoneenter: evt=>{\n * \t\t\t// drag target enter in a droppable zone.\n * \t\t},\n * \t\tonzoneexit: evt=>{\n * \t\t\t// drag target exit from  droppable zone.\n * \t\t},\n * \t\tondrop: ({dd, target, zone})=>{\n * \t\t\t// end of drag\n * \t\t\tif (zone) {\n *\n * \t\t\t}\n * \t\t\telse {\n * \t\t\t\ttarget.dd.comeBack(); // return to position before dragdrop action.\n * \t\t\t}\n * \t\t},\n * });\n */\nexport default class DragDropManager extends Component {\n    /**\n    * @param {object} dataObject\n    */\n    constructor(dataObject) {\n        super(dataObject);\n    }\n}\n"]}