{"version":3,"sources":["../../../src/jx/comps/GroupList.js"],"names":["GroupList","dataObject","Object","assign","shuffleGroups","shuffleChildren","_groups","_index","loops","group","groupIndex","groups","index","children","childIndex","push","randomAll","numGroups","i","nextGroup","_nextOne","console","log","concat","_randomiseArray","length","trace","result","j","items","jx","tools","gd","child","myList","lList","slice","randomList","randomPos","boucleLength","_randomValue","splice","min","max","randomNum","Math","floor","random"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAEqBA,S;;;AACjB,2BAAYC,UAAZ,EAAwB;AAAA;;AAAA,8HACdC,OAAOC,MAAP,CAAc;AAChBC,+BAAe,IADC;AAEhBC,iCAAiB;AAFD,aAAd,EAGHJ,UAHG,CADc;;AAKpB,kBAAKK,OAAL,GAAe,EAAf;AACA,kBAAKC,MAAL,GAAc,CAAC,CAAf;AACA,kBAAKC,KAAL,GAAa,CAAC,CAAd;AACA,gBAAIC,KAAJ;AACA,iBAAK,IAAIC,aAAa,CAAtB,EAAyBA,aAAa,MAAKT,UAAL,CAAgBU,MAAtD,EAA8DD,YAA9D,EAA4E;AACxED,wBAAQ,EAAEG,OAAOF,UAAT,EAAqBG,UAAU,EAA/B,EAAR;AACA,qBAAK,IAAIC,aAAa,CAAtB,EAAyBA,aAAa,MAAKb,UAAL,CAAgBY,QAAtD,EAAgEC,YAAhE,EAA8E;AAC1EL,0BAAMI,QAAN,CAAeE,IAAf,CAAoB,EAAEH,OAAOE,UAAT,EAAqBL,OAAOC,UAA5B,EAApB;AACH;AACD,sBAAKJ,OAAL,CAAaS,IAAb,CAAkBN,KAAlB;AACH;AACD;AACA,kBAAKL,aAAL,GAAqB,MAAKH,UAAL,CAAgBG,aAArC;AACA,kBAAKC,eAAL,GAAuB,MAAKJ,UAAL,CAAgBI,eAAvC;AACA,kBAAKW,SAAL;AAnBoB;AAoBvB;;;;mCAUmB;AAAA,oBAAfC,SAAe,yDAAH,CAAG;;AAChB,oBAAIN,SAAS,EAAb;AACA,oBAAIE,WAAW,EAAf;AACA,qBAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAID,SAApB,EAA+BC,GAA/B,EAAoC;AAChC,wBAAIC,YAAY,KAAKC,QAAL,EAAhB;AACA,wBAAID,aAAa,IAAjB,EAAuB;AACnBE,gCAAQC,GAAR,CAAY,qBAAZ;AACA;AACH;AACDX,2BAAOI,IAAP,CAAYI,SAAZ;AACAN,+BAAWA,SAASU,MAAT,CAAgBJ,UAAUN,QAA1B,CAAX;AACH;AACD;AACA,uBAAO,EAAEF,QAAQ,KAAKa,eAAL,CAAqBb,MAArB,CAAV,EAAwCE,UAAW,KAAKR,eAAL,GAAuB,KAAKmB,eAAL,CAAqBX,QAArB,CAAvB,GAAwDA,QAA3G,EAAP;AACH;;;uCACU;AACP,qBAAKN,MAAL;AACA,oBAAI,KAAKA,MAAL,IAAe,KAAKD,OAAL,CAAamB,MAAhC,EAAwC;AACpC,wBAAI,KAAKjB,KAAL,IAAc,CAAC,CAAnB,EAAsB;AAElB,6BAAKD,MAAL,GAAc,CAAd;AACH,qBAHD,MAIK;AACD,+BAAO,IAAP;AACH;AACJ;AACD,uBAAO,KAAKD,OAAL,CAAa,KAAKC,MAAlB,CAAP;AACH;;;kCAKkB;AAAA,oBAAfmB,KAAe,yDAAP,KAAO;;AACf,oBAAIC,SAAS,EAAb;AACA,qBAAK,IAAIT,IAAI,CAAb,EAAgBA,IAAI,KAAKZ,OAAL,CAAamB,MAAjC,EAAyCP,GAAzC,EAA8C;AAC1CS,8BAAU,aAAa,KAAKrB,OAAL,CAAaY,CAAb,EAAgBN,KAAvC;AACAe,8BAAU,cAAV;AACA,yBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKtB,OAAL,CAAaY,CAAb,EAAgBL,QAAhB,CAAyBY,MAA7C,EAAqDG,GAArD,EAA0D;AACtDD,kCAAU,OAAO,KAAKrB,OAAL,CAAaY,CAAb,EAAgBL,QAAhB,CAAyBe,CAAzB,EAA4BhB,KAA7C;AACH;AACD;AACAe,8BAAU,IAAV;AACH;AACD;AACA,oBAAID,KAAJ,EACIL,QAAQC,GAAR,CAAYK,MAAZ;AACJ,uBAAOA,MAAP;AACH;;;qCAEQE,K,EAAsB;AAAA,oBAAfH,KAAe,yDAAP,KAAO;;AAC3BL,wBAAQC,GAAR,CAAYO,KAAZ,EAAmBA,MAAMJ,MAAzB;AACA,oBAAIE,SAAS,EAAb;AACA,qBAAK,IAAIT,IAAI,CAAb,EAAgBA,IAAIW,MAAMJ,MAA1B,EAAkCP,GAAlC,EAAuC;AACnCS,8BAAU,KAAKG,EAAL,CAAQC,KAAR,CAAcC,EAAd,CAAiBH,MAAMX,CAAN,EAAST,KAA1B,EAAiC,CAAjC,IAAsC,GAAtC,GAA4C,KAAKqB,EAAL,CAAQC,KAAR,CAAcC,EAAd,CAAiBH,MAAMX,CAAN,EAASN,KAA1B,EAAiC,CAAjC,CAAtD;AACAe,8BAAU,IAAV;AACH;AACD;AACA,oBAAID,KAAJ,EACIL,QAAQC,GAAR,CAAYK,MAAZ;AACJ,uBAAOA,MAAP;AACH;;;wCACW;AACR,qBAAKrB,OAAL,GAAe,KAAKF,aAAL,GAAqB,KAAKoB,eAAL,CAAqB,KAAKlB,OAA1B,CAArB,GAA0D,KAAKA,OAA9E;AACA,oBAAIG,KAAJ,EAAWwB,KAAX;AACA,qBAAK,IAAIvB,aAAa,CAAtB,EAAyBA,aAAa,KAAKJ,OAAL,CAAamB,MAAnD,EAA2Df,YAA3D,EAAyE;AACrED,4BAAQ,KAAKH,OAAL,CAAaI,UAAb,CAAR;AACAD,0BAAMI,QAAN,GAAiB,KAAKR,eAAL,GAAuB,KAAKmB,eAAL,CAAqBf,MAAMI,QAA3B,CAAvB,GAA8DJ,MAAMI,QAArF;AACH;AACD;AACH;;;4CACeqB,M,EAAQ;AACpB,oBAAIC,QAAQD,OAAOE,KAAP,EAAZ;AACA,oBAAIC,aAAa,EAAjB;AACA,oBAAIC,SAAJ;AACA,oBAAIC,eAAeJ,MAAMV,MAAzB;AACA,qBAAK,IAAIP,IAAI,CAAb,EAAgBA,IAAIqB,YAApB,EAAkCrB,GAAlC,EAAuC;AACnCoB,gCAAY,KAAKE,YAAL,CAAkB,CAAlB,EAAqBL,MAAMV,MAAN,GAAe,CAApC,CAAZ;AACAY,+BAAWtB,IAAX,CAAgBoB,MAAMG,SAAN,CAAhB;AACAH,0BAAMM,MAAN,CAAaH,SAAb,EAAwB,CAAxB;AACH;AACD,uBAAOD,UAAP;AACH;;;yCACYK,G,EAAKC,G,EAAK;AACnB,oBAAIC,YAAYC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,MAAiBJ,MAAMD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAA9D;AACA,uBAAOE,SAAP;AACH;;;oCACO;AACJ,qBAAKrC,MAAL,GAAc,CAAC,CAAf;AACH;;;gCAjGY;AACT,uBAAO,KAAKD,OAAZ;AACH;;;;;;sBAxBgBN,S","file":"GroupList.js","sourcesContent":["import Component from \"jx/core/comps/Component\";\n/** */\nexport default class GroupList extends Component {\n    constructor(dataObject) {\n        super(Object.assign({\n            shuffleGroups: true,\n            shuffleChildren: true\n        }, dataObject));\n        this._groups = [];\n        this._index = -1;\n        this.loops = -1;\n        var group;\n        for (var groupIndex = 0; groupIndex < this.dataObject.groups; groupIndex++) {\n            group = { index: groupIndex, children: [] };\n            for (var childIndex = 0; childIndex < this.dataObject.children; childIndex++) {\n                group.children.push({ index: childIndex, group: groupIndex });\n            }\n            this._groups.push(group);\n        }\n        ;\n        this.shuffleGroups = this.dataObject.shuffleGroups;\n        this.shuffleChildren = this.dataObject.shuffleChildren;\n        this.randomAll();\n    }\n    get groups() {\n        return this._groups;\n    }\n    /**\n    * return numGroups nexts groups with all their children.\n    * the result is an object containing 2 arrays:\n    * - groups : a two-dimensionnal array of groups and their children\n    * - children : an array with only all children.\n    */\n    next(numGroups = 1) {\n        var groups = [];\n        var children = [];\n        for (var i = 0; i < numGroups; i++) {\n            var nextGroup = this._nextOne();\n            if (nextGroup == null) {\n                console.log(\"end of list reached\");\n                break;\n            }\n            groups.push(nextGroup);\n            children = children.concat(nextGroup.children);\n        }\n        ;\n        return { groups: this._randomiseArray(groups), children: (this.shuffleChildren ? this._randomiseArray(children) : children) };\n    }\n    _nextOne() {\n        this._index++;\n        if (this._index >= this._groups.length) {\n            if (this.loops == -1) {\n                //this.randomAll();\n                this._index = 0;\n            }\n            else {\n                return null;\n            }\n        }\n        return this._groups[this._index];\n    }\n    /**\n    * log\n    * @param {boolean} trace - allow 2 writing: list.log(true), same as console.log(list.log()). 2nd is longer but best for localise who call log().\n    */\n    log(trace = false) {\n        var result = \"\";\n        for (var i = 0; i < this._groups.length; i++) {\n            result += \"Group : \" + this._groups[i].index;\n            result += \"\\tchildren: \";\n            for (var j = 0; j < this._groups[i].children.length; j++) {\n                result += \"\\t\" + this._groups[i].children[j].index;\n            }\n            ;\n            result += \"\\n\";\n        }\n        ;\n        if (trace)\n            console.log(result);\n        return result;\n    }\n    /** */\n    logItems(items, trace = false) {\n        console.log(items, items.length);\n        var result = \"\";\n        for (var i = 0; i < items.length; i++) {\n            result += this.jx.tools.gd(items[i].group, 2) + \"_\" + this.jx.tools.gd(items[i].index, 2);\n            result += \"\\n\";\n        }\n        ;\n        if (trace)\n            console.log(result);\n        return result;\n    }\n    randomAll() {\n        this._groups = this.shuffleGroups ? this._randomiseArray(this._groups) : this._groups;\n        var group, child;\n        for (var groupIndex = 0; groupIndex < this._groups.length; groupIndex++) {\n            group = this._groups[groupIndex];\n            group.children = this.shuffleChildren ? this._randomiseArray(group.children) : group.children;\n        }\n        ;\n    }\n    _randomiseArray(myList) {\n        var lList = myList.slice();\n        var randomList = [];\n        var randomPos;\n        var boucleLength = lList.length;\n        for (var i = 0; i < boucleLength; i++) {\n            randomPos = this._randomValue(0, lList.length - 1);\n            randomList.push(lList[randomPos]);\n            lList.splice(randomPos, 1);\n        }\n        return randomList;\n    }\n    _randomValue(min, max) {\n        var randomNum = Math.floor(Math.random() * (max - min + 1)) + min;\n        return randomNum;\n    }\n    reset() {\n        this._index = -1;\n    }\n}\n"]}