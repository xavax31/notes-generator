{"version":3,"sources":["../../../../../src/ts_src/screens/ScreenFlashBase.js"],"names":["ScreenFlashBase","dataObject","Object","assign","stage","screenManager","screenName","_config","rid","_screenName","_killed","screen","hide","_lib","window","callback","jx","db","load","id","cc","exclude","toFreeze","visible","ccid","type","view","getMC","data","addChild","unfreeze","target","freeze","removeChild"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAKqBA,e;;;AACjB,iCAAYC,UAAZ,EAAwB;AAAA;;AAAA,0IACdC,OAAOC,MAAP,CAAc;AAChBC,uBAAO,IADS;AAEhBC,+BAAe,IAFC;AAGhBC,4BAAY;AAHI,aAAd,EAIHL,UAJG,CADc;;AAMpB,kBAAKM,OAAL,CAAaC,GAAb,GAAmB,MAAKC,WAAL,GAAmB,qBAAtC;AANoB;AAOvB;;;;mCACM;AACH,oBAAI,KAAKC,OAAT,EACI;AACJ,oBAAI,KAAKC,MAAT,EAAiB;AACb,yBAAKC,IAAL;AACA,yBAAKD,MAAL,GAAc,IAAd;AACH;AACD,qBAAKE,IAAL,GAAY,IAAZ;AACAC,uBAAO,KAAKL,WAAZ,IAA2B,IAA3B;AACAK,uBAAO,KAAKL,WAAL,GAAmB,SAA1B,IAAuC,IAAvC;AACA;AACH;;;iCAKIM,Q,EAAU;AAAA;;AACX,qBAAKC,EAAL,CAAQC,EAAR,CAAWC,IAAX,CAAgB,EAAEC,IAAI,KAAKV,WAAL,GAAmB,qBAAzB,EAAhB,EAAkE,YAAM;AACpE,2BAAKI,IAAL,GAAY,OAAKO,EAAL,CAAQ,EAAEZ,KAAK,OAAKD,OAAL,CAAaC,GAApB,EAAyBJ,OAAO,OAAKA,KAArC,EAA4CiB,SAAS,EAArD;AAChBC,kCAAU,EADM,EACFC,SAAS,KADP,EAAR,CAAZ;AAEA,+IAAWR,QAAX;AACH,iBAJD;AAKH;;;0CAIa;AACV,qBAAKS,IAAL,CAAU,EAAEL,IAAI,QAAN,EAAgBM,MAAM,MAAtB,EAA8BC,MAAM,KAAKb,IAAL,CAAUc,KAAV,CAAgB,QAAhB,CAApC,EAAV;AACH;;;iCAMIZ,Q,EAAUa,I,EAAM;AAAA;;AACjB,uIAAW,YAAM;AACb,2BAAKxB,KAAL,CAAWyB,QAAX,CAAoB,OAAKhB,IAAzB;AACA,2BAAKA,IAAL,CAAUU,OAAV,GAAoB,IAApB;AACA,2BAAKV,IAAL,CAAUiB,QAAV;AACAf,6BAAS,EAAEgB,cAAF,EAAT;AACH,iBALD;AAMH;;;mCAIM;AACH;AACA,qBAAKlB,IAAL,CAAUU,OAAV,GAAoB,KAApB;AACA,qBAAKV,IAAL,CAAUmB,MAAV;AACA,qBAAK5B,KAAL,CAAW6B,WAAX,CAAuB,KAAKpB,IAA5B;AACH;;;;;;sBA3DgBb,e","file":"ScreenFlashBase.js","sourcesContent":["import ScreenBase from \"src/screens/ScreenBase\";\n/**\n* **Events:**\n* - onfinished : fired when screen is completed.\n */\nexport default class ScreenFlashBase extends ScreenBase {\n    constructor(dataObject) {\n        super(Object.assign({\n            stage: null,\n            screenManager: null,\n            screenName: null\n        }, dataObject));\n        this._config.rid = this._screenName + \".FLASHSCREEN.CONFIG\";\n    }\n    kill() {\n        if (this._killed)\n            return;\n        if (this.screen) {\n            this.hide();\n            this.screen = null;\n        }\n        this._lib = null;\n        window[this._screenName] = null;\n        window[this._screenName + \"_images\"] = null;\n        super.kill();\n    }\n    /**\n     * init (async) screen (clipcjs)\n     * @param  {Function} callback\n     */\n    init(callback) {\n        this.jx.db.load({ id: this._screenName + \".FLASHSCREEN.SCREEN\" }, () => {\n            this._lib = this.cc({ rid: this._config.rid, stage: this.stage, exclude: [],\n                toFreeze: [], visible: false });\n            super.init(callback);\n        });\n    }\n    /**\n     * initScreen after this._lib (ClipCJS) is ready.\n     */\n    _initScreen() {\n        this.ccid({ id: \"screen\", type: \"Clip\", view: this._lib.getMC(\"SCREEN\") });\n    }\n    /**\n     * show screen\n     * @param  {Function} callback fired when screen is really displayed.\n     * @param  {any}   data     data to transmit to screen\n     */\n    show(callback, data) {\n        super.show(() => {\n            this.stage.addChild(this._lib);\n            this._lib.visible = true;\n            this._lib.unfreeze();\n            callback({ target: this });\n        });\n    }\n    /**\n     * hide screen\n     */\n    hide() {\n        super.hide();\n        this._lib.visible = false;\n        this._lib.freeze();\n        this.stage.removeChild(this._lib);\n    }\n}\n"]}