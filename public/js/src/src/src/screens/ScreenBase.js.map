{"version":3,"sources":["../../../../../../src/src/src/screens/ScreenBase.js"],"names":["ScreenBase","dataObject","Object","assign","stage","screenManager","screenName","jx","app","screens","_screenName","notInit","addEventDispatcher","onfinished","add","_config","jsonConfig","db","getParameter","_declareProperties","_killed","screen","hide","removeAll","callback","comps","initChildren","_initScreen","data","target"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAKqBA,U;;;AACjB,4BAAYC,UAAZ,EAAwB;AAAA;;AAAA,gIACdC,OAAOC,MAAP,CAAc;AAChBC,uBAAO,IADS;AAEhBC,+BAAe,IAFC;AAGhBC,4BAAY;AAHI,aAAd,EAIHL,UAJG,CADc;;AAOpB,kBAAKG,KAAL,GAAa,MAAKH,UAAL,CAAgBG,KAAhB,IAAyB,MAAKG,EAAL,CAAQC,GAAR,CAAYJ,KAAlD;;AAEA,kBAAKC,aAAL,GAAqB,MAAKJ,UAAL,CAAgBI,aAAhB,IAAiC,MAAKE,EAAL,CAAQC,GAAR,CAAYC,OAAlE;;AAEA,kBAAKC,WAAL,GAAmB,MAAKT,UAAL,CAAgBK,UAAnC;AACA,kBAAKK,OAAL,GAAe,IAAf;AACA,kBAAKC,kBAAL,CAAwB,YAAxB;AACA,gBAAI,MAAKX,UAAL,CAAgBY,UAApB,EACI,MAAKA,UAAL,CAAgBC,GAAhB,CAAoB,MAAKb,UAAL,CAAgBY,UAApC;AACJ,kBAAKE,OAAL,GAAe,EAAf;;AAEA,gBAAIC,aAAa,MAAKT,EAAL,CAAQU,EAAR,CAAWC,YAAX,CAAwB,MAAKR,WAAL,GAAmB,gBAA3C,CAAjB;AACA,gBAAIM,UAAJ,EACId,OAAOC,MAAP,CAAc,MAAKY,OAAnB,EAA4BC,UAA5B;AACJ,kBAAKG,kBAAL;AArBoB;AAsBvB;;;;iDACoB,CACpB;;;mCACM;AACH,oBAAI,KAAKC,OAAT,EACI;AACJ,oBAAI,KAAKC,MAAT,EAAiB;AACb,yBAAKC,IAAL;AACA,yBAAKD,MAAL,GAAc,IAAd;AACH;AACD;AACA,qBAAKR,UAAL,CAAgBU,SAAhB;AACA,qBAAKnB,KAAL,GAAa,IAAb;AACA,qBAAKS,UAAL,GAAkB,IAAlB;AACA,qBAAKR,aAAL,GAAqB,IAArB;AACA;AACH;;;iCAKImB,Q,EAAU;AAAA;;AACX,qBAAKC,KAAL,CAAWC,YAAX,CAAwB,YAAM;AAC1B,2BAAKC,WAAL;AACAH;AACH,iBAHD;AAIH;;;0CAIa,CACb;;;iCAMIA,Q,EAAUI,I,EAAM;AACjBJ,yBAAS,EAAEK,QAAQ,IAAV,EAAT;AACH;;;mCAIM,CACN;;;;;;sBAnEgB7B,U","file":"ScreenBase.js","sourcesContent":["import Component from \"jx/core/comps/Component\";\n/**\n* **Events:**\n* - onfinished : fired when screen is completed.\n */\nexport default class ScreenBase extends Component {\n    constructor(dataObject) {\n        super(Object.assign({\n            stage: null,\n            screenManager: null,\n            screenName: null\n        }, dataObject));\n        /** @type {StageView} */\n        this.stage = this.dataObject.stage || this.jx.app.stage;\n        /** @type {ScreenManager} */\n        this.screenManager = this.dataObject.screenManager || this.jx.app.screens;\n        /** @type {String} */\n        this._screenName = this.dataObject.screenName;\n        this.notInit = true;\n        this.addEventDispatcher(\"onfinished\");\n        if (this.dataObject.onfinished)\n            this.onfinished.add(this.dataObject.onfinished);\n        this._config = {};\n        //-- get screen config in json\n        let jsonConfig = this.jx.db.getParameter(this._screenName + \".Configuration\");\n        if (jsonConfig)\n            Object.assign(this._config, jsonConfig);\n        this._declareProperties();\n    }\n    _declareProperties() {\n    }\n    kill() {\n        if (this._killed)\n            return;\n        if (this.screen) {\n            this.hide();\n            this.screen = null;\n        }\n        ;\n        this.onfinished.removeAll();\n        this.stage = null;\n        this.onfinished = null;\n        this.screenManager = null;\n        super.kill();\n    }\n    /**\n     * init (async) screen (clipcjs)\n     * @param  {Function} callback\n     */\n    init(callback) {\n        this.comps.initChildren(() => {\n            this._initScreen();\n            callback();\n        });\n    }\n    /**\n     * initScreen after this._lib (ClipCJS) is ready.\n     */\n    _initScreen() {\n    }\n    /**\n     * show screen\n     * @param  {Function} callback fired when screen is really displayed.\n     * @param  {any}   data     data to transmit to screen\n     */\n    show(callback, data) {\n        callback({ target: this });\n    }\n    /**\n     * hide screen\n     */\n    hide() {\n    }\n}\n"]}